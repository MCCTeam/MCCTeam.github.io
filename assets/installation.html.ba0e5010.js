import{_ as i,a as t,b as l,c as r,d as c}from"./VPS_ConfigureStorage.f14e3f98.js";import{_ as d,r as p,o as u,c as h,a as e,b as n,d as a,e as o}from"./app.dedb4427.js";const m={},g=o('<h1 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h1><ul><li><a href="#youtube-tutorials">Tutoriales en YouTube</a></li><li><a href="#download-a-compiled-binary">Descarga los binarios compilados</a></li><li><a href="#building-from-the-source-code">Compilar desde el código fuente</a></li><li><a href="#using-docker">Ejecutar usando Docker</a></li><li><a href="#run-on-android">Ejecutar en Android</a></li><li><a href="#run-on-a-vps">Ejecutar MCC 24/7 en un Servidor Privado Virtual</a></li></ul><h2 id="tutoriales-en-youtube" tabindex="-1"><a class="header-anchor" href="#tutoriales-en-youtube" aria-hidden="true">#</a> Tutoriales en YouTube</h2><p>Si no eres el tipo de persona que le gusten los tutoriales en texto, nuestra comunidad ha hecho videotutoriales disponibles en YouTube.</p>',4),v={href:"https://www.youtube.com/watch?v=BkCqOCa2uQw",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.youtube.com/watch?v=FxJ0KFIHDrY",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"descarga-los-binarios-compilados",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#descarga-los-binarios-compilados","aria-hidden":"true"},"#"),n(" Descarga los binarios compilados")],-1),f={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},w=e("h2",{id:"compilar-desde-el-codigo-fuente",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#compilar-desde-el-codigo-fuente","aria-hidden":"true"},"#"),n(" Compilar desde el código fuente")],-1),_={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},D=e("p",null,"However, if you want to build the program from source code, please follow the guide.",-1),k=e("h3",{id:"windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows","aria-hidden":"true"},"#"),n(" Windows")],-1),E=e("p",null,"Requisitos:",-1),C={href:"https://www.git-scm.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://dotnet.microsoft.com/en-us/download",target:"_blank",rel:"noopener noreferrer"},T={href:"https://visualstudio.microsoft.com/",target:"_blank",rel:"noopener noreferrer"},S=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"Tip"),e("pre",null,[e("code",null,`**If you want to modify the code, and you are new to C# or in programming in general, you might want to watch some C# tutorials, we recommend the ones listed in [Creating Bots](creating-bots.md#requirements) section.**
`)])],-1),M=e("h4",{id:"clonar-usando-git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#clonar-usando-git","aria-hidden":"true"},"#"),n(" Clonar usando Git")],-1),A={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},P=e("li",null,"Cree una nueva carpeta donde quiera conservar el código fuente",-1),I=e("li",null,[n("Entra en la carpeta que has creado, mantén "),e("code",null,"SHIFT"),n(" y haz "),e("code",null,"Click-derecho"),n(" en el espacio vacío")],-1),N=e("li",null,[n("Haga clic en "),e("code",null,"Git Bash Here"),n(" en el menú contextual")],-1),R={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},V=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Una vez que el repositorio haya terminado de clonarse, puede cerrar la Consola de Comandos</li><li>Abra la nueva carpeta clonada</li></ol><h4 id="download-translation-resources-optional" tabindex="-1"><a class="header-anchor" href="#download-translation-resources-optional" aria-hidden="true">#</a> Download translation resources (optional)</h4>`,3),L={href:"https://crowdin.com/project/minecraft-console-client",target:"_blank",rel:"noopener noreferrer"},O=o("<li>You will need to log in to your Crowdin account in order to download.</li><li>Click on the language you want to download the translation for.</li><li>Find <code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>Translations</code> -&gt; <code>MCC in-app text</code></li><li>Click the button <code>•••</code> at the end of the line.</li><li>Click Download and save the file to folder <code>/MinecraftClient/Resources/Translations/</code>.</li><li>Find <code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>ConfigComments</code> -&gt; <code>Comments in the settings file</code></li><li>Click the button <code>•••</code> at the end of the line.</li><li>Click Download and save the file to folder <code>/MinecraftClient/Resources/ConfigComments/</code>.</li><li>Find <code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>AsciiArt</code> -&gt; <code>ASCII Arts (Please use fixed-width fonts for editing)</code></li><li>Click the button <code>•••</code> at the end of the line.</li><li>Click Download and save the file to folder <code>/MinecraftClient/Resources/AsciiArt/</code>.</li><li>If you need to download a translation in another language, go to step 3 to continue.</li>",12),z=o(`<h4 id="compilar-usando-visual-studio" tabindex="-1"><a class="header-anchor" href="#compilar-usando-visual-studio" aria-hidden="true">#</a> Compilar usando Visual Studio</h4><ol><li>Abra <code>MinecraftClient.sln</code> con Visual Studio</li><li>Right click on <code>MinecraftClient</code> solution in the <code>Solution Explorer</code></li><li>Haga clic en <code>Propiedades</code></li><li>Open up the <code>Build</code> tab and select configuration <code>Release</code></li><li>Presione <code>CTRL + S</code> y cierre el archivo</li><li>Right click on <code>MinecraftClient</code> solution in the <code>Solution Explorer</code></li><li>Click <code>Build</code></li></ol><p>If the build has succeeded, the compiled binary <code>MinecraftClient.exe</code> will be in <code>MinecraftClient/bin/Release/net7.0/win-x64/publish</code> folder.</p><h4 id="compilar-manualmente-usando-net-sin-visual-studio" tabindex="-1"><a class="header-anchor" href="#compilar-manualmente-usando-net-sin-visual-studio" aria-hidden="true">#</a> Compilar manualmente usando .NET sin Visual Studio</h4><ol><li>Abra la carpeta <code>Minecraft-Console-Client</code> que ha clonado o descargado</li><li>Abra PowerShell (<code>Click derecho</code> en el espacio en blanco y haga clic en <code>Abrir PowerShell</code>, o en el Explorador de Windows: <code>Archivo -&gt; Abrir PowerShell</code>)</li><li>Ejecute el siguiente comando para compilar el proyecto:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r win-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the build has succeeded, the compiled binary <code>MinecraftClient.exe</code> will be in <code>MinecraftClient/bin/Release/net7.0/win-x64/publish</code> folder.</p><h3 id="linux-macos" tabindex="-1"><a class="header-anchor" href="#linux-macos" aria-hidden="true">#</a> Linux/macOS:</h3><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Si estás usando Linux, asumiremos que puedes instalar git por tu cuenta. Si no sabes cómo, búscalo para tu distribución, debería ser fácil. (Distros basadas en Debian: <code>apt install git</code>, Basado en Arch: <code>pacman -S git</code>)</strong></p></div><p>Requisitos:</p>`,10),q=e("p",null,"Git",-1),H=e("li",null,[e("p",null,"Linux:")],-1),U={href:"https://git-scm.com/download/mac",target:"_blank",rel:"noopener noreferrer"},W=e("p",null,".NET SDK 7.0 or new-er",-1),F={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docs.microsoft.com/en-us/dotnet/core/install/macos",target:"_blank",rel:"noopener noreferrer"},j=e("h4",{id:"clonar-usando-git-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#clonar-usando-git-1","aria-hidden":"true"},"#"),n(" Clonar usando Git")],-1),Y=e("li",null,"Abra una terminal y entre a la carpeta donde guardará MCC",-1),B={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},K=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),$={start:"3"},Q=e("li",null,[e("p",null,[n("Vaya a la carpeta que ha clonado (debería ser "),e("code",null,"Minecraft-Console-Client"),n(")")])],-1),X=e("li",null,[e("p",null,[n("If you want to download translation resources, please check out "),e("a",{href:"#download-translation-resources-optional"},"Download translation resources")])],-1),J=e("p",null,"Ejecute el siguiente comando para compilar el proyecto:",-1),Z=o(`<p>En Linux:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r linux-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),ee={class:"custom-container tip"},ne=e("p",{class:"custom-container-title"},"Tip",-1),se={href:"https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#linux-rids",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"-r linux-64",-1),oe=e("code",null,"-r RID_NAME",-1),ie=e("code",null,"-r linux-arm64",-1),te=o(`<p>En macOS:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r osx-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),le={class:"custom-container tip"},re=e("p",{class:"custom-container-title"},"Tip",-1),ce={href:"https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#macos-rids",target:"_blank",rel:"noopener noreferrer"},de=e("code",null,"-r osx-64",-1),pe=e("code",null,"-r RID_NAME",-1),ue=e("code",null,"-r osx.12-arm64",-1),he=o('<p>Si la compilación ha tenido éxito, el binario compilado <code>MinecraftClient</code> estará en:</p><ul><li>Linux: <code>MinecraftClient/bin/Release/net7.0/linux-x64/publish/</code></li><li>macOS: <code>MinecraftClient/bin/Release/net7.0/osx-x64/publish/</code></li></ul><h2 id="usando-docker" tabindex="-1"><a class="header-anchor" href="#usando-docker" aria-hidden="true">#</a> Usando Docker</h2><p>Requisitos:</p><ul><li>Git</li><li>Docker</li></ul><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Esta sección es para usuarios más avanzados, si no sabes cómo instalar git o docker, puede echar un vistazo a otras secciones para Git, y buscar sobre cómo instalar Docker en su sistema.</strong></p></div><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>Preste atención a las advertencias, Docker funciona actualmente, pero debe iniciar los contenedores en el modo interactivo o MCC se bloqueará, estamos trabajando en resolver esto.</strong></p></div>',7),me={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},ge=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Vaya a <code>Minecraft-Console-Client/Docker</code></li><li>Compile la imagen usando el siguiente comando:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker build -t minecraft-console-client:latest </span><span style="color:#DCDCAA;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Iniciar el contenedor usando Docker:</strong></p><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>Hay un error con ConsoleInteractive que causa un fallo cuando un contenedor se inicia en modo sin cabeza(headless), así que necesita usar el modo interactivo. No reinicie los contenedores de manera clásica, Deténgalo y entonces inícielo con el modo interactivo (este comando), después de eso simplemente desacopla con <code>CTRL + P</code> y luego <code>CTRL + Q</code>.</strong></p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># También puede ignorar el parámetro -v si no quiere montar el volumen, eso depende de usted. Si no lo hace, es más difícil editar el archivo de configuración .ini si es algo que se quiere hacer.</span></span>
<span class="line"><span style="color:#D4D4D4;">docker run -it -v &lt;PATH_ON_YOUR_MACHINE_TO_MOUNT&gt;:/opt/data minecraft-console-client:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Ahora puede iniciar sesión y el Cliente se estará ejecutando.</p><p>Para desacoplarse del cliente pero mantenerlo funcionando en segundo plano presione: <code>CTRL + P</code> y después <code>CTRL + Q</code>.</p><p>Para reacoplarse use el comando: <code>docker attach</code></p><p><strong>Iniciar el contenedor usando docker-compose:</strong></p><p>Por defecto, el volumen del contenedor se mapea en una nueva carpeta llamada <code>data</code> en la misma carpeta <code>docker-compose.yml</code> está almacenado.</p><p>Si no desea mapear un volumen, tiene que ** ** o eliminar la entera sección de volúmenes:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">#volúmenes:</span></span>
<span class="line"><span style="color:#6A9955;">#- &#39;./data:/opt/data&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Asegúrese de que está en el directorio en el que se almacena <code>docker-compose.yml</code> antes de intentar iniciarlo. Cuando lo haga, puede iniciar el contenedor:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose run MCC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Recuerde eliminar el contenedor después de usarlo:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Si utiliza el archivo INI e ingresó sus datos (nombre de usuario, contraseña, servidor) en ese entonces, puede iniciar su contenedor usando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose up</span></span>
<span class="line"><span style="color:#D4D4D4;">docker-compose up -d </span><span style="color:#6A9955;">#para ejecutar deamonized en segundo plano</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Tenga en cuenta que no podrá interactuar con el cliente usando <code>docker-compose up</code>. Si desea esa funcionalidad, utilice el primer método: <code>docker-compose run MCC</code>.</p><p>Igual que anteriormente, puede detener y remover el contenedor usando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ejecutar-en-android" tabindex="-1"><a class="header-anchor" href="#ejecutar-en-android" aria-hidden="true">#</a> Ejecutar en Android</h2><p>Es posible ejecutar el cliente de la consola de Minecraft en Android a través de Termux y Ubuntu 22.04 en él, sin embargo requiere una configuración manual de varios comandos, tenga cuidado de NO OMITIR ningún paso. Tenga en cuenta que esto puede tardar entre 10 y 20 minutos o más en completar dependiendo de su nivel de conocimiento técnico, Velocidad de Internet y velocidad del CPU.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Esta sección va a ser un poco técnica, voy a hacer todo lo posible para que sea lo más simple posible. Si tiene problemas para continuar o si encuentra algún problema, no dude en abrir una discusión en nuestro repositorio de Github.</strong></p></div>`,25),ve={class:"custom-container tip"},be=e("p",{class:"custom-container-title"},"Tip",-1),ye={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},fe=o('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Aquí estaremos instalando todo en la cuenta root por simplicidad, si quieres crear una cuenta de usuario, asegúrate de actualizar el comando que hace referencia al directorio <code>/root</code> con tu directorio de inicio.</strong></p></div><h3 id="installation-1" tabindex="-1"><a class="header-anchor" href="#installation-1" aria-hidden="true">#</a> Installation</h3><h4 id="termux" tabindex="-1"><a class="header-anchor" href="#termux" aria-hidden="true">#</a> Termux</h4>',3),we={class:"custom-container warning"},_e=e("p",{class:"custom-container-title"},"Warning",-1),De={href:"https://github.com/termux/termux-app/releases/latest/",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://github.com/termux/termux-app/releases/latest/",target:"_blank",rel:"noopener noreferrer"},Ee=e("code",null,"debug_universal.apk",-1),Ce=o('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Si tu gestor de archivos no te permite ejecutar archivos APK, instala y usa <code>File Manager +</code> y dale permiso para instalar aplicaciones de terceros cuando se te pregunte.</strong></p></div><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>Una vez instalado Termux, ábralo, baje el menú de notificaciones, en la notificación de Termux, arrastre hacia abajo hasta que vea las siguientes opciones: <code>Exit | Acquire wakelock</code>, presione en <code>Acquire wakelock</code> y permita a Termux tener permsio de exclusión de optimización de batería cuándo se pregunte. Si no lo haces, ¡tu rendimiento será reducido y Termux podría ser cerrado por Android mientras se ejecuta en segundo plano!</strong></p></div><h4 id="instalando-ubuntu-22-04" tabindex="-1"><a class="header-anchor" href="#instalando-ubuntu-22-04" aria-hidden="true">#</a> Instalando Ubuntu 22.04</h4><p>En esta etapa, tienes dos opciones:</p>',4),xe=e("li",null,"Siguiendo con este mismo tutorial en texto",-1),Te={href:"https://www.youtube.com/watch?v=5yit2t7smpM",target:"_blank",rel:"noopener noreferrer"},Se=o(`<div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>If you decide to watch the Youtube tutorial, watch only up to <code>1:58</code>, the steps after are not needed and might just confuse you.</strong></p></div><p>Para instalar Ubuntu 22.04 en Termux necesitas <code>wget</code> y <code>pRoot</code>, vamos a instalarlos en los siguientes pasos.</p><p>Una vez que tenga Termux instalado, ábralo y ejecute el siguiente comando uno tras otro (en orden):</p><ol><li><code>pkg update</code></li><li><code>pkg upgrade</code></li><li><code>pkg install proot wget</code></li></ol><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Si se le pide que presione Y/N durante el proceso de actualización(pasos Update/Upgrade), simplemente ingrese Y, y presione Enter</strong></p></div><p>Ahora necesita descargar un script de instalación usando el siguiente comando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://raw.githubusercontent.com/MFDGaming/ubuntu-in-termux/master/ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Una vez descargado el script, ejecútelo con:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">bash ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Entonces se le hará una pregunta, ingrese <code>Y</code>, y presione <code>Enter</code>.</p><p>Una vez finalizada la instalación, puedes iniciar Ubuntu con:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./startubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Ahora cada vez que abra Termux después de que se haya cerrado, para acceder a Ubuntu tiene que usar este comando</strong></p></div><h4 id="instalando-net-en-arm" tabindex="-1"><a class="header-anchor" href="#instalando-net-en-arm" aria-hidden="true">#</a> Instalando .NET en ARM</h4><p>Since there are issues installing .NET 7.0 via the APT package manager at the time of writing, we will have to install it manually.</p><p>Primero necesitamos actualizar los repositorios del gestor de paquetes APT e instalar sus dependencias.</p><p>Para actualizar los repositorios APT, ejecute el siguiente comando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt update -y &amp;&amp; apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Después de hacerlo, necesitamos instalar dependencias para .NET, con el siguiente comando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt install wget nano unzip libc6 libgcc1 libgssapi-krb5-2 libstdc++6 zlib1g libicu70 libssl3 -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),Me={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#manual-install",target:"_blank",rel:"noopener noreferrer"},Ae=o(`<p>Navigate to your <code>/root</code> home directory with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /root</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>First you need to download .NET 7.0, you can do it with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://download.visualstudio.microsoft.com/download/pr/6cd2eaa7-4c06-4168-b90b-ee2d6bb40b10/4a8387eb07e17d262bfb9965f6d34462/dotnet-sdk-7.0.203-linux-arm64.tar.gz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),Pe={class:"custom-container tip"},Ie=e("p",{class:"custom-container-title"},"Tip",-1),Ne={href:"https://download.visualstudio.microsoft.com/download/pr/55972ef4-146e-47e6-b014-0163cbaca6a3/fa9713f73f44088898843016d68c5929/dotnet-sdk-7.0.203-linux-arm.tar.gz",target:"_blank",rel:"noopener noreferrer"},Re={class:"custom-container tip"},Ve=e("p",{class:"custom-container-title"},"Tip",-1),Le={href:"https://dotnet.microsoft.com/en-us/download/dotnet/7.0",target:"_blank",rel:"noopener noreferrer"},Oe=o('<p>Once the file has been downloaded, you need to run the following commands in order:</p><ol><li><p><code>DOTNET_FILE=dotnet-sdk-7.0.203-linux-arm64.tar.gz</code></p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>If you&#39;re using a different download link, update the file name in this command to match your version.</strong></p></div></li><li><p><code>export DOTNET_ROOT=/root/.dotnet</code></p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>Here we&#39;re installing .NET in <code>/root</code>, if you&#39;re installing it somewhere else, make sure to set your own path!</strong></p></div></li><li><p><code>mkdir -p &quot;$DOTNET_ROOT&quot; &amp;&amp; tar zxf &quot;$DOTNET_FILE&quot; -C &quot;$DOTNET_ROOT&quot;</code></p></li><li><p><code>export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools</code></p></li></ol><p>Now we need to tell our shell to know where the <code>dotnet</code> command is, for future sessions, since the commands above just tell this current session where the <code>dotnet</code> is located.</p>',3),ze={class:"custom-container warning"},qe=e("p",{class:"custom-container-title"},"Warning",-1),He={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Ue=o(`<p>To enable this, we need to edit our <code>/root/.bashrc</code> file with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano /root/.bashrc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Scroll down to the bottom of the file using <code>Page Down</code> (<code>PGDN</code>) button, make a new line and paste the following text:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> DOTNET_ROOT=/root/.dotnet/</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> PATH=</span><span style="color:#9CDCFE;">$PATH</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">/tools</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>Here we&#39;re installing .NET in <code>/root</code>, if you&#39;re installing it somewhere else, make sure to set your own path!</strong></p></div><p>Save the file usign the following combination of keys: <code>CTRL + X</code>, type <code>Y</code> and press Enter.</p><p>Veryfy that .NET was installed correctly by running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should get a help page:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">root@localhost:~</span><span style="color:#6A9955;"># dotnet</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="installing-mcc" tabindex="-1"><a class="header-anchor" href="#installing-mcc" aria-hidden="true">#</a> Installing MCC</h4><p>Finally, we can install MCC.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>If you have a 32 ARM processor, you need to build the MCC yourself, take a look at the <a href="#building-from-the-source-code">Building From Source</a> section. Also make sure to be using the appropriate <code>-r</code> parameter value for your architecture.</strong></p></div><p>Let&#39;s make a folder where the MCC will be stored with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then enter it the newly created folder:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Download the MCC with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://github.com/MCCTeam/Minecraft-Console-Client/releases/latest/download/MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Unzip it with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">unzip MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can remove the zip archive now, we do not need it anymore, with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And finally run it with:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./MinecraftClient</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="after-installation" tabindex="-1"><a class="header-anchor" href="#after-installation" aria-hidden="true">#</a> After installation</h4><p>When you run Termux next time, you need to start Ubuntu with: <code>./startubuntu.sh</code></p><p>Then you can start the MCC again with <code>./MinecraftClient</code></p><p>To stop MCC from running you can press <code>CTRL + C</code></p>`,29),We={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Fe=e("p",null,[n("For downloading files, you can use the "),e("code",null,"wget"),n(" file we have installed, simply run:")],-1),Ge=e("p",null,[e("code",null,"wget your_link_here"),n(" (you have examples above, and a video tutorial down bellow).")],-1),je=e("p",null,"Además, aquí hay algunos tutoriales de linux para personas nuevas:",-1),Ye={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},$e={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},Qe=e("h2",{id:"run-on-a-vps",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#run-on-a-vps","aria-hidden":"true"},"#"),n(" Run on a VPS")],-1),Xe={class:"custom-container tip"},Je=e("p",{class:"custom-container-title"},"Tip",-1),Ze={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},en=o('<p>The <strong>Minecraft Console Client</strong> can be run on a VPS 24 hours, 7 days a week.</p><ul><li><a href="#what-is-a-vps">What is a VPS?</a></li><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#where-to-get-a-vps">Where to get a VPS</a></li><li><a href="#initial-amazon-vps-setup">Initial Amazon VPS setup</a></li><li><a href="#initial-vps-setup">Initial VPS setup</a></li><li><a href="#creating-a-new-user">Creating a new user account</a></li><li><a href="#installing-net-core-6">Installing .NET Core 6</a></li><li><a href="#installing-mcc-on-a-vps">Installing the Minecraft Console Client</a></li></ul><h3 id="what-is-a-vps" tabindex="-1"><a class="header-anchor" href="#what-is-a-vps" aria-hidden="true">#</a> What is a VPS?</h3><p>VPS stands for a <strong>V</strong>irtual <strong>P</strong>rivate <strong>S</strong>erver, it&#39;s basically a remote virtual PC that is running in the cloud, 24 hours a day, 7 days in week. To be precise, it&#39;s a virtual machine that runs on top of a host operating system (eg. Proxmox).</p><p>You can use a VPS for hosting a website, or a an app, or a game server, or your own VPN, or the Minecraft Console Client.</p>',5),nn={href:"https://youtu.be/42fwh_1KP_o",target:"_blank",rel:"noopener noreferrer"},sn=e("h3",{id:"prerequisites",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#prerequisites","aria-hidden":"true"},"#"),n(" Prerequisites")],-1),an=e("p",null,"Gitbash (if you're on Windows)",-1),on={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},tn=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"Tip"),e("p",null,[e("strong",null,"Make sure to allow the installation to add it to the context menu")])],-1),ln=e("li",null,[e("p",null,[e("code",null,"ssh"),n(" and "),e("code",null,"ssh-keygen"),n(" commands (On Windows they're available with Gitbash, on macOs and Linux they should be available by default, it not, search on how to install them)")])],-1),rn=e("p",null,"Basic knowledge of Linux shell commands, terminal emulator usage, SSH and Nano editor.",-1),cn=e("p",null,"If you already know this, feel free to skip.",-1),dn=e("p",null,"if you get stuck, watch those tutorials.",-1),pn=e("p",null,"If you're new to this, you can learn about it here:",-1),un={href:"https://www.youtube.com/watch?v=JsWQUOEL0N8",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},bn=o('<h3 id="where-to-get-a-vps" tabindex="-1"><a class="header-anchor" href="#where-to-get-a-vps" aria-hidden="true">#</a> Where to get a VPS</h3><p>You have 2 options:</p><ul><li><a href="#buying-a-vps">Buying a VPS</a></li><li><a href="#aws-ec2-vps">Getting an AWS EC2 VPS for free (12 months free trial)</a></li></ul><h4 id="buying-a-vps" tabindex="-1"><a class="header-anchor" href="#buying-a-vps" aria-hidden="true">#</a> Buying a VPS</h4><p>If you do not want to give your info to Amazon or don&#39;t have a debit card, you can buy your own VPS.</p><p><strong>What hardware requirements I need for running the MCC?</strong></p><p>The MCC is not expensive to run, so it can run on basically any hardware, you do not need to spend a lot of money on a VPS if you are going to run just the MCC, go with the cheapest option.</p><p><strong>Where to buy a VPS?</strong></p><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>In this tutorial we will be using <code>Ubuntu 22.04</code>, make sure to select it as the OS when buying a VPS.</strong></p></div><p>Some of the reliable and cheap hosting providers (sorted for price/performance):</p>',10),yn={href:"https://e-trail.net/vps",target:"_blank",rel:"noopener noreferrer"},fn=e("p",null,[e("strong",null,"Minimum price"),n(": "),e("code",null,"2.50 EUR / month")],-1),wn=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"Tip"),e("p",null,[e("strong",null,"Does not have Ubuntu 22.04 in the dropdown menu when ordering, you will have to re-install later or ask support to do it.")])],-1),_n={href:"https://www.ovhcloud.com/de/vps/",target:"_blank",rel:"noopener noreferrer"},Dn=e("p",null,[e("strong",null,"Minimum price"),n(": "),e("code",null,"3.57 EUR / month")],-1),kn={href:"https://www.hetzner.com/cloud",target:"_blank",rel:"noopener noreferrer"},En=e("p",null,[e("strong",null,"Minimum price"),n(": "),e("code",null,"4.51 EUR / month")],-1),Cn={href:"https://www.digitalocean.com/pricing/droplets",target:"_blank",rel:"noopener noreferrer"},xn=e("p",null,[e("strong",null,"Minimum price"),n(": "),e("code",null,"4 EUR / month")],-1),Tn={href:"https://contabo.com/en/vps/",target:"_blank",rel:"noopener noreferrer"},Sn=e("p",null,[e("strong",null,"Minimum price"),n(": "),e("code",null,"7 EUR / month")],-1),Mn=e("p",null,[e("strong",null,"More serious VPS able to host multiple applications, 4 CPU cores and 8 GB of RAM, 200 GB SSD")],-1),An=o('<p>You also may want to search for better deals.</p><h4 id="aws-ec2-vps" tabindex="-1"><a class="header-anchor" href="#aws-ec2-vps" aria-hidden="true">#</a> AWS EC2 VPS</h4><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>This will require you to have a valid debit card that can be used on internet and a mobile phone number, as well as giving that info to Amazon corporation.</strong></p></div><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>Scammers often get AWS VPS and use it to mass login on to stolen Microsoft accounts, some AWS IP addresses might be blocked by Microsoft because of that, if so, you might need to switch regions or to use a Proxy. To debug if your IP has been banned by Microsoft, use the <code>ping &lt;ip&gt;</code> and <code>traceroute &lt;ip&gt;</code> commands.</strong></p></div><div class="custom-container warning"><p class="custom-container-title">Warning</p><p><strong>Related to the warning above, if you have issues logging with Microsoft and you&#39;re not banned, you may want to check the Security center on your account and approve the login from the VPS, this can be the case for some users.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>If you&#39;re not banned, sometimes fetching the keys can take some time, try giving it a minute or two, if it still hangs, hit some keys to refresh the screen, or try restarting and running again. If it still happens, use tmux instead of screen.</strong></p></div><p>Register on AWS and enter all of your billing info and a phone number.</p><p>Once you&#39;re done, you can continue to <a href="#setting-up-an-aws-vps">Setting up the Amazon VPS</a>.</p><h3 id="initial-amazon-vps-setup" tabindex="-1"><a class="header-anchor" href="#initial-amazon-vps-setup" aria-hidden="true">#</a> Initial Amazon VPS setup</h3><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Skip this section if you&#39;re not using AWS. Go to <a href="#initial-vps-setup">Initial VPS setup</a></strong></p></div><p>When you register and open the <code>AWS Console</code>, click on the Search field on the top of the page and search for: <code>EC2</code></p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Make sure to select the region closest to you for the minimal latency</strong></p></div><p>Click on the <strong>Launch instance</strong> button.</p><p>Fill out the <code>Name</code> field with a name of your preference.</p><p><img src="'+i+'" alt="VPS Name"></p><p>For the <strong>Application and OS images</strong> select <code>Ubuntu Server 22.04 LTS (HVM), SSD Volume Type</code>.</p><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>Make sure that it has <code>Free tier eligible</code> next to it.</strong></p></div><p><img src="'+t+'" alt="VPS Select OS"></p><p>For the <strong>Instance type</strong> select <code>t2.micro</code>.</p><p>For the <strong>Key pair (login)</strong> click on <strong>Create new key pair</strong> and name it <code>VpsRoot</code>, leave the rest of settings as default and click <strong>Create key pair</strong>, this will generate a RSA private key that will be automatically downloaded.</p><div class="custom-container danger"><p class="custom-container-title">Danger</p><p><strong>Make sure that you save this file in a safe place and do not loose it, it&#39;s of an upmost importance since it&#39;s used to access the root/admin account of the VPS. Without it you will not be able to access the root account of the VPS! Also do not let it fall into wrong hands.</strong></p></div><p><img src="'+l+'" alt="VPS Instance Type"></p><p>For the <strong>Network settings</strong> check the following checkboxes on:</p><ul><li><code>Allow SSH traffic from</code> (Anywhere)</li><li><code>Allow HTTPs traffic from the internet</code></li><li><code>Allow HTTP traffic from the internet</code></li></ul><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>The SSH traffic from Anywhere is not the best thing for security, you might want to enter IP addresses of your devices from which you want to access the VPS manually.</strong></p></div><p><img src="'+r+'" alt="VPS Network Settings"></p><p>For the <strong>Storage</strong> enter <code>30</code>.</p><p><img src="'+c+`" alt="VPS Configure Storage"></p><p>Finally, review the <strong>Summary</strong> confirm that everything is as in the tutorial and that you will not be charged and click on the <strong>Launch instance</strong>. Once you&#39;ve clicked on the button, it will take a couple of minutes for the instance to be available up and running.</p><p>Once the instance is up and running, go to it&#39;s details and copy the <code>Public DNS v4 IP</code>.</p><p>You now need to login, go to your folder where you keep the private key you&#39;ve generated and downloaded (make sure you make a new folder for it, do not keep in the downloads folder) and right click on the empty white space (not on files), if you&#39;re on Windows click <strong>Git Bash here</strong>, on mac OS and Linux click on <strong>Open Terminal</strong> (or whatever it is called).</p><p>In order to login with SSH, you are going to use the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;name of your private root key here&gt; ubuntu@&lt;your public dns v4 ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong><code>&lt;</code> and <code>&gt;</code> are not typed, that is just a notation for a placeholder!</strong></p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong><code>ubuntu</code> is a default root account username for Ubuntu on AWS!</strong></p></div><p>Example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i VpsRoot.pem ubuntu@ec2-3-71-108-69.eu-central-1.compute.amazonaws.com</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you&#39;ve provided the right info you should get <code>Welcome to Ubuntu 20.04.5 LTS</code> message.</p><p>Now you can continue to <a href="#creating-a-new-user">Creating a new user</a></p><h3 id="initial-vps-setup" tabindex="-1"><a class="header-anchor" href="#initial-vps-setup" aria-hidden="true">#</a> Initial VPS setup</h3><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>This section if for those who do not use AWS, if you use AWS skip it</strong></p></div><p>When you order the VPS, most likely you will be asked to provide the root account name and password, if it is the case, name the account as <code>root</code> and give it a password of your choice.</p><p>Other option is that you will get your login info in the email once the setup is done.</p>`,43),Pn={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},In=e("code",null,"ssh",-1),Nn=o(`<p>If you&#39;re on Windows open <code>Git Bash</code>, on mac OS and Linux open a <code>Terminal</code> and type the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh &lt;username&gt;@&lt;ip&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>If you&#39;re given a custom port other than <code>22</code> by your host, you should add <code>-p &lt;port here&gt;</code> before the username (eg. <code>ssh -p &lt;port here&gt; &lt;username&gt;@&lt;ip&gt;</code>) or <code>:&lt;port&gt;</code> after the ip (eg. <code>ssh &lt;username&gt;@&lt;ip&gt;:&lt;port&gt;</code>)</strong></p></div><p>Example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example with port:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -p 2233 root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Once you&#39;ve logged in you should see a Linux prompt and a welcome message if there is one set by your provider.</p><h3 id="creating-a-new-user" tabindex="-1"><a class="header-anchor" href="#creating-a-new-user" aria-hidden="true">#</a> Creating a new user</h3><p>Once you&#39;ve logged in to your VPS you need to create a new user and give it SSH access.</p><p>In this tutorial we will be using <code>mcc</code> as a name for the user account that will be running the MCC.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>You may be wondering why we&#39;re creating a separate user account and making it be accessible over SSH only. This is for security reasons, if you do not want to do this, you&#39;re free to skip it, but be careful.</strong></p></div><p>To create a new user named <code>mcc</code> execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo useradd mcc -m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we need to give it a password, execute the following command, type the password and confirm it:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo passwd mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>When you&#39;re typing a password it will not be displayed on the screen, but you&#39;re typing it for real.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Make sure you have a strong password!</strong></p></div><p>Now we need to give our user account the admin permissions:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo usermod -aG sudo mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we are going to set it&#39;s shell to bash:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo chsh mcc -s /bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we need to log in as the <code>mcc</code> user:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">su mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Fill in your password when asked.</p><p>Navigate to the <code>mcc</code> user home directory with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Make a new <code>.ssh</code> directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Enter it with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Make a new empty file named <code>authorized_keys</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">touch authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Do no close the Git bash/Terminal emulator.</p><p>On your PC, make a new folder where you are going to store your SSH keys that you&#39;re going to use to log in to the user account.</p><p>Open the folder, and right click on the empty white space (not on files), if you&#39;re on Windows click <strong>Git Bash here</strong>, on mac OS and Linux click on <strong>Open Terminal</strong> (or whatever it is called).</p><p>Type the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh-keygen -t RSA -b 4096</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Enter the name of the key file to be: <code>MCC_Key</code>, press Enter.</p><p>When asked for a <code>passphrase</code>, enter a password of your choice and confirm it, make sure it&#39;s strong and that you remember it, best if you write it down on a piece of paper.</p><p>This will generate a private and a public key that you will use to log in to the VPS as a user that you&#39;ve created.</p><p>Now open the <code>MCC_Key.pub</code> file with a text editor of your choice and copy it&#39;s contents to the clipboard.</p><p>Return to the Git Bash/Terminal emulator and execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install nano -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will install the Nano editor on your VPS.</p><p>Now we need to let the SSH service on your VPS know about your newly generated SSH key pair.</p><p>Make sure you are in the <code>/home/mcc/.ssh</code> folder, you can confirm this by executing:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">pwd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If it does not print <code>/home/mcc/.ssh</code>, navigate to it with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /home/mcc/.ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now you need to open the <code>authorized_keys</code> file with the nano editor:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now paste the copied contents of the <code>MCC_Key.pub</code> into the nano editor by right clicking on it.</p><p>Save the file with <code>CTRL + O</code>, press Enter, and then exit it with <code>CTRL + X</code>.</p><p>Now we need to configure the SSHD service to let us login with the SSH key we have generated, for this we need to edit the <code>/etc/ssh/sshd_config</code> file with nano:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo nano /etc/ssh/sshd_config</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Find the <code>#PubkeyAuthentication yes</code> line and remove the <code>#</code> in front to uncomment the line.</p><p>Then find the <code>#AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</code> line and remove the <code>#</code> to uncomment the line.</p><p>Additionally for better security you can do the following:</p><ul><li>Set <code>PermitRootLogin</code> to <code>yes</code></li><li>Change the <code>Port</code> to some number of your choice (22-65000) (Make sure it&#39;s at least 2 digits and avoid common ports used by other apps like: 21, 80, 35, 8080, 3000, etc...)</li><li>Uncomment <code>#PasswordAuthentication yes</code> by removing the <code>#</code> in front and set it to <code>yes</code> (This will disable password login, you will be able to login with SSH keys only!)</li></ul><p>Save the file with <code>CTRL + O</code>, hit Enter, close it with <code>CTRL + X</code>.</p><p>Now we need to restart the SSHD service with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl restart sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s check if everything is working correctly:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl status sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If everything has been configured as it should be you should see <code>active (running)</code> as a status of the service.</p><p>If not, open the config file again and check for mistakes.</p><p>Press <code>q</code> to exit the log mode.</p><p>Logout from the <code>mcc</code> user with <code>exit</code> command, and then logout from the root <code>ubuntu</code> user by typing <code>exit</code> again.</p><p>Now we can login to the user with our private <code>MCC_Key</code> file.</p><p>Command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;path to the MCC_Key private key&gt; mcc@&lt;ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i MCC_Key mcc@3.71.108.69</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>If you&#39;ve changed the <code>Port</code>, make sure you add a <code>-p &lt;your port here&gt;</code> option after the <code>-i &lt;key&gt;</code> option (eg. <code>ssh -i MCC_Key -p 8973 mcc@3.71.108.69</code>)!</strong></p></div><p>If did everything correctly you should see a Linux prompt and a welcome message if there is one on your provider.</p><p>You can do <code>whoami</code> to see your username.</p><p>Now you can install .NET Core 7 and MCC.</p><h3 id="installing-net-core-7" tabindex="-1"><a class="header-anchor" href="#installing-net-core-7" aria-hidden="true">#</a> Installing .NET Core 7</h3><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>If your VPS has an ARM CPU, follow <a href="#installing-net-on-arm">this</a> part of the documentation and then return to section after this one.</strong></p></div>`,80),Rn={class:"custom-container warning"},Vn=e("p",{class:"custom-container-title"},"Warning",-1),Ln=e("code",null,"A fatal error occurred, the folder [/usr/share/dotnet/host/fxr] does not contain any version-numbered child folders",-1),On={href:"https://github.com/dotnet/sdk/issues/27082#issuecomment-1211143446",target:"_blank",rel:"noopener noreferrer"},zn=o(`<p>Log in as the user you&#39;ve created.</p><p>Update the system packages and package manager repositories:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt update -y &amp;&amp; sudo apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Install <code>wget</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install wget -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Go to your home directory with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Download the Microsoft repository file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Add Microsoft repositories to the package manager:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo dpkg -i packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Remove the file, we do not need it anymore:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, install .NET Core 7:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt-get update -y &amp;&amp; sudo apt-get install -y dotnet-sdk-7.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run the following command to check if everything was installed correctly:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should get:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),qn={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#2204",target:"_blank",rel:"noopener noreferrer"},Hn=o('<p>If it was successful, you can now install the MCC.</p><h3 id="installing-mcc-on-a-vps" tabindex="-1"><a class="header-anchor" href="#installing-mcc-on-a-vps" aria-hidden="true">#</a> Installing MCC on a VPS</h3><p>Now that you have .NET Core 7.0 and a user account, you should install the <code>screen</code> utility, you will need this in order to keep the MCC running once you close down the SSH session (if you do not have it, the MCC will just stop working once you disconnect). You can look at the <code>screen</code> like a window, except it&#39;s in a terminal, it lets you have multiple &quot;windows&quot; open at the same time.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>There is also a Docker method, if you&#39;re using Docker, you do not need the <code>screen</code> program.</strong></p></div>',4),Un={href:"https://youtu.be/_ZJiEX4rmN4",target:"_blank",rel:"noopener noreferrer"},Wn=o(`<p>To install the <code>screen</code> execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install screen -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now you can install the MCC:</p><ul><li><a href="#download-a-compiled-binary">Descarga los binarios compilados</a></li><li><a href="#building-from-the-source-code">Compilar desde el código fuente</a></li><li><a href="#using-docker">Run using Docker</a> (Doesn&#39;t require the <code>screen</code> command)</li></ul><p>How to use the <code>screen</code> command?</p>`,5),Fn={class:"custom-container warning"},Gn=e("p",{class:"custom-container-title"},"Warning",-1),jn={href:"https://www.youtube.com/watch?v=Yl7NFenTgIo",target:"_blank",rel:"noopener noreferrer"},Yn=o(`<p>To start a screen, type:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -S mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong><code>mcc</code> here is the name of the screen, you can use whatever you like, but if you&#39;ve used a different name, make sure you use that one instead of the <code>mcc</code> in the following commands.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>You need to make a screen only once, however if you reboot your VPS, you need to start it on each reboot.</strong></p></div><p>Now you will be in the screen, now you can start the MCC and detach from the screen.</p><p>To detach from the screen press <code>CTRL + A + D</code>.</p><p>To re-attach/return to the screen, execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -r mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you&#39;ve accidentally closed the SSH session without detaching from the screen it might be still attached, to detach it use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -d mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To list out screens you can use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To stop the MCC, you can hit <code>CTRL + D</code> (hit it few times).</p>`,13);function Bn(Kn,$n){const s=p("ExternalLinkIcon");return u(),h("div",null,[g,e("ul",null,[e("li",null,[e("a",v,[n("Installation on Windows by Daenges"),a(s)])]),e("li",null,[e("a",b,[n("Installation on Windows + Auto AFK and More by Dexter113"),a(s)])])]),y,e("p",null,[n("Puede descargar la última versión en nuestra sección de Versiones en Git Hub: "),e("a",f,[n("Click Aquí"),a(s)])]),w,e("p",null,[n("We recommend you to download our precompiled binary file from "),e("a",_,[n("GitHub"),a(s)]),n(".")]),D,k,E,e("ul",null,[e("li",null,[e("a",C,[n("Git"),a(s)])]),e("li",null,[e("a",x,[n(".NET 7.0 or new-er"),a(s)]),n(" or "),e("a",T,[n("Visual Studio"),a(s)]),n(" configured for C# app development")])]),S,M,e("p",null,[n("Instala aquí: "),e("a",A,[n("Git"),a(s)])]),e("ol",null,[P,I,N,e("li",null,[n("Clone el "),e("a",R,[n("Repositorio de Git Hub"),a(s)]),n(" escribiendo y ejecutando el siguiente comando:")])]),V,e("ol",null,[e("li",null,[n("Visit "),e("a",L,[n("MCC project's homepage on Crowdin"),a(s)]),n(".")]),O]),z,e("ul",null,[e("li",null,[q,e("ul",null,[H,e("li",null,[e("p",null,[e("a",U,[n("Instalar Git en macOS"),a(s)])])])])]),e("li",null,[W,e("ul",null,[e("li",null,[e("a",F,[n("Instalar .NET en Linux"),a(s)])]),e("li",null,[e("a",G,[n("Instalar .NET en macOS"),a(s)])])])])]),j,e("ol",null,[Y,e("li",null,[n("Clone el "),e("a",B,[n("Repositorio de Git Hub"),a(s)]),n(" escribiendo y ejecutando el siguiente comando:")])]),K,e("ol",$,[Q,X,e("li",null,[J,e("ul",null,[e("li",null,[Z,n(),e("div",ee,[ne,e("p",null,[e("strong",null,[n("If you're using Linux that is either ARM, 32-bit, Rhel based, Using Musl, or Tirzen, "),e("a",se,[n("find an appropriate RID"),a(s)]),n(" for your platform and replace the "),ae,n(" with an appropriate "),oe,n(" (Example for arm: "),ie,n(")")])])])]),e("li",null,[te,n(),e("div",le,[re,e("p",null,[e("strong",null,[n("If you're not using MAC with Intel, find an appropriate RID for your ARM processor, "),e("a",ce,[n("find an appropriate RID"),a(s)]),n(" and replace the "),de,n(" with an appropriate "),pe,n(" (Example for arm: "),ue,n(")")])])])])])])]),he,e("ol",null,[e("li",null,[n("Clone el "),e("a",me,[n("Repositorio de Git Hub"),a(s)]),n(" escribiendo y ejecutando el siguiente comando:")])]),ge,e("div",ve,[be,e("p",null,[e("strong",null,[n("Necesitas tener algunos conocimientos básicos de Linux, si no sabes nada, mira "),e("a",ye,[n("este video"),a(s)]),n(" para familiarizarse con los comandos básicos.")])])]),fe,e("div",we,[_e,e("p",null,[e("strong",null,[n("La versión de Termux en Play Store está desactualizada y no está soportada, no la utilices, usa la versión oficial en "),e("a",De,[n("Github"),a(s)]),n(".")])])]),e("p",null,[n("Vaya a "),e("a",ke,[n("la última versión de Termux en Github"),a(s)]),n(", descargue "),Ee,n(", descomprima y ejecute.")]),Ce,e("ol",null,[xe,e("li",null,[n("Ver un videotutorial en Youtube para "),e("a",Te,[n("instalar Ubuntu en Termux"),a(s)])])]),Se,e("p",null,[n("After you have installed dependencies, it's time to install .NET, you either can follow this tutorial or the "),e("a",Me,[n("Microsoft one"),a(s)]),n(".")]),Ae,e("div",Pe,[Ie,e("p",null,[e("strong",null,[n("This tutorial assumes that you have 64 bit version of ARM processor, if you happen to have a 32-bit version replace the link in the command above with "),e("a",Ne,[n("this one"),a(s)])])])]),e("div",Re,[Ve,e("p",null,[e("strong",null,[n("This tutorial assumes that you're following along and using Ubuntu 22.04, if you're using a different distro, like Alpine, go to "),e("a",Le,[n("here"),a(s)]),n(" and copy an appropriate link for your distro.")])])]),Oe,e("div",ze,[qe,e("p",null,[e("strong",null,[n("You will need a basic knowledge of Nano text editor, if you do not know how to use it, watch this "),e("a",He,[n("Youtube video tutorial"),a(s)])])])]),Ue,e("p",null,[n("To edit the configuration/settings, you need a text editor, we recommend Nano, as it's very simple to use, if you have followed the installation steps above, you should be familiar with it, if not, check out "),e("a",We,[n("this tutorial"),a(s)]),n(".")]),Fe,Ge,je,e("ul",null,[e("li",null,[e("a",Ye,[n("Linux Terminal Introduction by ExplainingComputers"),a(s)])]),e("li",null,[e("a",Be,[n("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),a(s)])]),e("li",null,[e("a",Ke,[n("Linux Crash Course - The wget Command by Learn Linux TV"),a(s)])]),e("li",null,[e("a",$e,[n("Linux Basics: How to Untar and Unzip Files (tar, gzip) by webpwnized"),a(s)])])]),Qe,e("div",Xe,[Je,e("p",null,[e("strong",null,[n("This is a new section, if you find a mistake, please report it by opening an Issue in our "),e("a",Ze,[n("Github repository"),a(s)]),n(". Thank you!")])])]),en,e("p",null,[n("Here is a "),e("a",nn,[n("Youtube video"),a(s)]),n(" that explains it in more detail if you're interested.")]),sn,e("ol",null,[e("li",null,[an,e("p",null,[n("Download and install "),e("a",on,[n("Gitbash"),a(s)]),n(".")]),tn]),ln,e("li",null,[rn,cn,dn,pn,e("ul",null,[e("li",null,[e("a",un,[n("What is Linux? by Bennett Bytes"),a(s)])]),e("li",null,[e("a",hn,[n("Linux Terminal Introduction by ExplainingComputers"),a(s)])]),e("li",null,[e("a",mn,[n("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),a(s)])]),e("li",null,[e("a",gn,[n("Linux Crash Course - The wget Command by Learn Linux TV"),a(s)])]),e("li",null,[e("a",vn,[n("Linux Basics: How to Untar and Unzip Files (tar, gzip) by webpwnized"),a(s)])])])])]),bn,e("ul",null,[e("li",null,[e("p",null,[e("a",yn,[n("E-Trail"),a(s)])]),fn,wn]),e("li",null,[e("p",null,[e("a",_n,[n("OVH Cloud"),a(s)])]),Dn]),e("li",null,[e("p",null,[e("a",kn,[n("Hetzner Cloud"),a(s)])]),En]),e("li",null,[e("p",null,[e("a",Cn,[n("Digital Ocean"),a(s)])]),xn]),e("li",null,[e("p",null,[e("a",Tn,[n("Contabo"),a(s)])]),Sn,Mn])]),An,e("p",null,[n("Once you have the root login account info, you need "),e("a",Pn,[n("Gitbash"),a(s)]),n(" on Windows and "),In,n(" if you're on macOS or Linux (if you do not have it by some chance, search on how to install it, it is simple).")]),Nn,e("div",Rn,[Vn,e("p",null,[e("strong",null,[n("With newer versions of .NET Core 7 on Ubuntu 22.04 you might get the following error: "),Ln,n(", if you get it, use "),e("a",On,[n("this solution"),a(s)])])])]),zn,e("p",null,[n("If you do not get this output and the installation was not successful, "),e("a",qn,[n("try other methods"),a(s)]),n(".")]),Hn,e("p",null,[n("You also can learn about the screen command from "),e("a",Un,[n("this Youtube tutorial"),a(s)]),n(".")]),Wn,e("div",Fn,[Gn,e("p",null,[e("strong",null,[n("If you have issues with Screen command, like output not being properly formatted or program handing/freezing, try using tmux, click "),e("a",jn,[n("here"),a(s)]),n(" to learn how to use it.")])])]),Yn])}const Jn=d(m,[["render",Bn],["__file","installation.html.vue"]]);export{Jn as default};
