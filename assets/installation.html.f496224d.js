import{_ as l,a as o,b as c,c as t,d as r}from"./VPS_ConfigureStorage.f14e3f98.js";import{_ as d,r as p,o as u,c as h,a as e,b as s,d as a,e as i}from"./app.b292e524.js";const m={},v=i('<h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><ul><li><a href="#youtube-tutorials">YouTube视频教程</a></li><li><a href="#download-a-compiled-binary">下载源码</a></li><li><a href="#building-from-the-source-code">从源码构建</a></li><li><a href="#using-docker">在Docker中运行</a></li><li><a href="#run-on-android">在Android上运行</a></li><li><a href="#run-on-a-vps">在VPS上运行MCC 24/7</a></li></ul><h2 id="youtube视频教程" tabindex="-1"><a class="header-anchor" href="#youtube视频教程" aria-hidden="true">#</a> YouTube视频教程</h2><p>如果您不喜欢文字教程,我们的社区制作了Youtube视频</p>',4),b={href:"https://www.youtube.com/watch?v=BkCqOCa2uQw",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.youtube.com/watch?v=FxJ0KFIHDrY",target:"_blank",rel:"noopener noreferrer"},D=e("h2",{id:"下载源码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#下载源码","aria-hidden":"true"},"#"),s(" 下载源码")],-1),_={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"从源码构建",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#从源码构建","aria-hidden":"true"},"#"),s(" 从源码构建")],-1),E={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"However, if you want to build the program from source code, please follow the guide.",-1),k=e("h3",{id:"windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows","aria-hidden":"true"},"#"),s(" Windows")],-1),C=e("p",null,"要求:",-1),x={href:"https://www.git-scm.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://dotnet.microsoft.com/en-us/download",target:"_blank",rel:"noopener noreferrer"},S={href:"https://visualstudio.microsoft.com/",target:"_blank",rel:"noopener noreferrer"},T=e("h4",{id:"使用-git-克隆",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-git-克隆","aria-hidden":"true"},"#"),s(" 使用 Git 克隆")],-1),M={href:"https://www.git-scm.com/",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,"创建一个你想要保留源代码的新文件夹",-1),P=e("li",null,[s("然后打开它，按住 "),e("code",null,"SHIFT"),s(" 并右键点击 "),e("code",null,"点击文件夹中空白的白色空间")],-1),L=e("li",null,[s("在上下文菜单中点击 "),e("code",null,"Git Bash")],-1),V={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},N=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>一旦仓库被克隆，您可以关闭 <code>Git Bash</code> 终端模拟器</li><li>打开新克隆的文件夹</li></ol><h4 id="下载翻译资源-可选" tabindex="-1"><a class="header-anchor" href="#下载翻译资源-可选" aria-hidden="true">#</a> 下载翻译资源（可选）</h4>`,3),R={href:"https://zh.crowdin.com/project/minecraft-console-client",target:"_blank",rel:"noopener noreferrer"},O=i("<li>您需要登录您的Crowdin帐户才能下载。</li><li>点击您想要下载翻译的语言。</li><li>查找 <code>MinecraftClient</code> -&gt; <code>资源</code> -&gt; <code>翻译</code> -&gt; <code>MCC 应用内文本</code></li><li>点击行尾的<code>•••</code>按钮。</li><li>点击下载并将文件保存到文件夹 <code>MinecraftClient/Resources/ Translations/</code>。</li><li>查找 <code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>ConfigComments</code> -&gt; <code>Comments in the settings file</code></li><li>点击行尾的<code>•••</code>按钮。</li><li>单击下载并将文件保存到文件夹<code>/MinecraftClient/Resources/ConfigComments/</code></li><li>找到 <code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>AsciiArt</code> -&gt; <code>ASCII Arts (Please use fixed-width fonts for editing)</code></li><li>点击行尾的<code>•••</code>按钮。</li><li>点击下载并将文件保存到文件夹 <code>MinecraftClient/Resources/AsciiArt/</code>。</li><li>如果您需要下载另一种语言的翻译，请前往第3步继续。</li>",12),z=i(`<h4 id="使用-visual-studio-构建" tabindex="-1"><a class="header-anchor" href="#使用-visual-studio-构建" aria-hidden="true">#</a> 使用 Visual Studio 构建</h4><ol><li>通过 Visual Studio 打开 <code>MinecraftClient.sln</code></li><li>右键点击 <code>MinecraftClient</code> 解决方案在 <code>解决方案资源管理器</code></li><li>点击 <code>属性</code></li><li>打开 <code>构建</code> 标签页并选择配置 <code>发布</code></li><li>按 <code>CTRL + S</code> 关闭文件</li><li>右键点击 <code>MinecraftClient</code> 解决方案在 <code>解决方案资源管理器</code></li><li>点击 <code>构建</code></li></ol><p>如果构建成功，编译后的二进制文件 <code>MinecraftClient.exe</code> 将位于 <code>MinecraftClient/bin/Release/net6.0/win-x64/published</code> 文件夹。</p><h4 id="使用-net手动构建-无需visual-studio" tabindex="-1"><a class="header-anchor" href="#使用-net手动构建-无需visual-studio" aria-hidden="true">#</a> 使用.NET手动构建，无需Visual Studio</h4><ol><li>打开您克隆或下载的<code>Minecraft-Console-Client</code>文件夹</li><li>打开 PowerShell (<code>右键在空白处</code> 并点击 <code>打开 PowerShell</code>或 在 Windows Explorer: <code>文件 -&gt; 打开 Powershell</code>)</li><li>运行以下命令以生成项目：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r win-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果构建成功，编译后的二进制文件 <code>MinecraftClient.exe</code> 将位于 <code>MinecraftClient/bin/Release/net6.0/win-x64/published</code> 文件夹。</p><h3 id="linux-macos" tabindex="-1"><a class="header-anchor" href="#linux-macos" aria-hidden="true">#</a> Linux, macOS</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>**如果你正在使用 Linux，我们会假定你应该能够自己安装git。 如果您不知道如何操作，请搜索您的发行版，这应该很容易。 (基于 Debian 的磁盘: <code>apt install git</code>, Arch based: <code>pacman -S git</code>) **</p></div><p>要求:</p>`,10),H=e("p",null,"Git",-1),G=e("li",null,[e("p",null,"Linux:")],-1),I={href:"https://git-scm.com/download/mac",target:"_blank",rel:"noopener noreferrer"},U=e("p",null,".NET SDK 6.0 或更高版本",-1),W={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.microsoft.com/en-us/dotnet/core/install/macos",target:"_blank",rel:"noopener noreferrer"},B=i(`<h4 id="使用-git-克隆-1" tabindex="-1"><a class="header-anchor" href="#使用-git-克隆-1" aria-hidden="true">#</a> 使用 Git 克隆</h4><ol><li>打开终端模拟器并导航到您将存储MCC的文件夹</li><li>递归克隆<a href="“https://github.com/MCCTeam/Minecraft-Console-Client”">GitHub 存储库</a> 通过键入 end 执行以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><p>转到您克隆过的文件夹 (应该是 <code>Minecraft-Console-Client</code>)</p></li><li><p>如果您想下载翻译资源，请查看<a href="“#download-translation-resources-optional”">下载翻译资源</a></p></li><li><p>运行以下命令以生成项目：</p><ul><li><p>在 Linux:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r linux-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div> <div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您使用的是 ARM、32 位、基于 Rhel、Using Musl 或 Tirzen 的 Linux，请为您的平台[找到合适的 RID]（https://docs.microsoft.com/zh-cn/dotnet/core/rid-catalog#linux-rids），并将 &#39;-r linux-64&#39; 替换为适当的 &#39;-r RID_NAME&#39;（arm 示例：“-r linux-arm64”）</strong></p></div></li><li><p>在 macOS:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r osx-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div> <div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您没有将 MAC 与 Intel 配合使用，请为您的 ARM 处理器找到合适的 RID，[查找合适的 RID] (https://docs.microsoft.com/zh-cn/dotnet/core/rid-catalog#macos-rids)，并将“-r osx-64”替换为适当的“-r RID_NAME”（arm 示例：“-r osx.12-arm64”）</strong></p></div></li></ul></li></ol><p>如果构建成功，编译后的二进制 <code>MinecraftClient</code> 将被输入：</p><ul><li>Linux: <code>MinecraftClient/bin/Release/net7.0/linux-x64/publish/</code></li><li>macOS: <code>MinecraftClient/bin/Release/net7.0/osx-x64/publish/</code></li></ul><h2 id="使用-docker" tabindex="-1"><a class="header-anchor" href="#使用-docker" aria-hidden="true">#</a> 使用 Docker</h2><p>要求:</p><ul><li>Git</li><li>Docker</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>**此部分适用于更高级的用户，如果您不知道如何安装 git 或 docker，可以查看 Git 的其他部分，并搜索如何在您的系统上安装 Docker。</p></div><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>警告时请注意，Docker目前正在工作。 但您必须以交互模式启动容器或MCC将崩溃，我们正在努力解决这个问题。</strong></p></div>`,11),Y={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},K=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>导航到 <code>Minecraft-Console-Client/Docker</code></li><li>使用以下命令生成映像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker build -t minecraft-console-client:latest </span><span style="color:#DCDCAA;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用 Docker启动容器：</strong></p><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p><strong>ConsoleInteractive 存在一个错误，当容器以无头模式启动时会导致崩溃，因此您需要使用交互模式。 不要以经典方式重新启动容器。然后停止并以交互模式启动(此命令)， 此后只需用<code>CTRL + P</code>断开，然后用<code>CTRL + Q</code>来分离。</strong></p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># 如果你不想挂载由你决定的卷, 你也可以忽略-v 参数。 如果你不想编辑.ini 文件，如果你想要做</span></span>
<span class="line"><span style="color:#D4D4D4;">docker运行-it -v &lt;PATH_ON_YOUR_MACHINE_TO_MOUNT&gt;:/opt/data minecraft-console-client:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在您可以登录，客户端正在运行。</p><p>要脱离客户端，但仍然在后台按下： <code>CTRL + P</code> 然后在 <code>CTRL + Q</code> 之后运行。</p><p>若要重新附加，请使用 <code> docker 附加</code> 命令。</p><p><strong>使用 docker-compose 启动容器：</strong></p><p>默认情况下，容器的卷将映射到名为 <code>data</code> 的新文件夹中存储 <code>docker-compose.yml</code> 的文件夹。</p><p>如果您不想映射卷，则必须注释或删除整个卷部分：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">#volumes:</span></span>
<span class="line"><span style="color:#6A9955;">#- &#39;./data:/opt/data&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请确保您在目录中 <code>docker-compose.yml</code> 在您尝试开始之前被存储。 如果你这样做，你可以启动容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose run MCC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请记住在使用后删除容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您使用 INI 文件并在那里输入您的数据 (用户名、密码、服务器) ，您可以使用以下方式启动您的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose up</span></span>
<span class="line"><span style="color:#D4D4D4;">docker-compose up -d </span><span style="color:#6A9955;">#for deamonized running in the background</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，您将无法使用 <code>docker-compose up</code> 与客户端交互。 如果你想要这个功能，请使用第一个方法： <code>docker-compose 运行 MCC</code>。</p><p>如上文所述，您可以通过以下方式停止和移除容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在android上运行" tabindex="-1"><a class="header-anchor" href="#在android上运行" aria-hidden="true">#</a> 在Android上运行</h2><p>可以通过 Termux 和 Ubuntu 22 在 Android 上运行 Minecraft 命令行客户端。 4 但是它需要手动设置大量命令，小心不要跳过任何步骤。 注意，这可能需要10至20分钟的时间或更长的时间，取决于您的技术知识水平。 互联网速度和 CPU 速度。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>这一部分将获得一些技术性的，我会尽力使一切尽可能简单。 如果您跟随时遇到问题或遇到任何问题，请随时在我们的 Github 仓库页面打开讨论。</strong></p></div>`,25),q={class:"custom-container tip"},$=e("p",{class:"custom-container-title"},"提示",-1),Q={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},X=i('<div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您想要创建一个用户帐户，我们就会在根帐户上安装一切简单易懂。 请确保你更新在你的主目录中引用<code>/root</code>目录的命令。</strong></p></div><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3><h4 id="termux" tabindex="-1"><a class="header-anchor" href="#termux" aria-hidden="true">#</a> Termux</h4>',3),J={class:"custom-container warning"},Z=e("p",{class:"custom-container-title"},"警告",-1),j={href:"https://github.com/termux/termux-app/releases/latest/",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://github.com/termux/termux-app/releases/latest/",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"debug_universal.apk",-1),ne=i('<div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您的文件管理器不允许您运行 APK 文件， 安装并使用 <code>File Manager +</code> 并允许它在接到请求时安装第三方应用程序。</strong></p></div><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p><strong>一旦您安装了 Termux，打开它，拉下安卓菜单以通知， 在 Termux 通知中，向下拖动直到您看到以下选项：<code>Exit | Acquire wakelock</code>, 点击<code>Acquire wakelock</code> 并允许Termux在询问时拥有电池优化排除权限。 如果您不这样做，您的性能将会变得更差，Termux 可能会在后台运行时被 Android 杀死！</strong></p></div><h4 id="安装-ubuntu-22-04" tabindex="-1"><a class="header-anchor" href="#安装-ubuntu-22-04" aria-hidden="true">#</a> 安装 Ubuntu 22.04</h4><p>在此阶段，您有两个选项：</p>',4),ae=e("li",null,"遵循此文本教程",-1),ie={href:"https://www.youtube.com/watch?v=5yit2t7smpM",target:"_blank",rel:"noopener noreferrer"},le=i(`<div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果你决定观看Youtube教程，请最多看<code>1:58</code>，后面的步骤是不必要的，可能只会混淆你。</strong></p></div><p>用于安装 Ubuntu 22。 在 Termux 中，您需要 <code>wget</code> and <code>proot</code>中, 我们将在下一步安装它们。</p><p>一旦您安装 Termux 后打开并运行以下命令（按顺序排列）：</p><ol><li><code>pkg update</code></li><li><code>pkg upgrade</code></li><li><code>pkg install proot wget</code></li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果你被要求在更新/升级命令过程中按Y/N 键，只需输入 Y 并按Enter</strong></p></div><p>然后您需要使用以下命令下载安装脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://raw.githubusercontent.com/MFDGaming/ubuntu-in-termux/master/ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在脚本下载完毕时运行它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">bash ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后您将被问到一个问题，输入 <code>Y</code> 并按 <code>Enter</code>。</p><p>安装完成后，您可以使用 Ubuntu 启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./startubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>现在每次您在关闭后打开 Termux 时，要访问 Ubuntu ，您必须使用此命令</strong></p></div><h4 id="在arm上安装-net" tabindex="-1"><a class="header-anchor" href="#在arm上安装-net" aria-hidden="true">#</a> 在ARM上安装 .NET</h4><p>由于在编写本报告时发生了通过 APT 软件包管理器安装 .NET 6.0 的问题，我们必须手动安装它。</p><p>首先，我们需要更新 APT 软件包管理器仓库并安装依赖项。</p><p>要更新 APT 存储库，请运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt update -y &amp;&amp; apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成后，我们需要为.NET安装依赖项，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt install wget nano unzip libc6 libgcc1 libgssapi-krb5-2 libstdc++6 zlib1g libicu70 libssl3 -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),oe={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#manual-install",target:"_blank",rel:"noopener noreferrer"},ce=i(`<p>通过以下命令导航到您的 <code>/root</code> 主目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /root</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先，您需要下载 .NET 6.0，您可以使用以下命令执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://download.visualstudio.microsoft.com/download/pr/901f7928-5479-4d32-a9e5-ba66162ca0e4/d00b935ec4dc79a27f5bde00712ed3d7/dotnet-sdk-6.0.400-linux-arm64.tar.gz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>本教程假设您有 64 位版本的 ARM 处理器，如果您碰巧有 32 位版本，请将上述命令中的链接替换为 [this]（https://download.visualstudio.microsoft.com/download/pr/cf567026-a29a-41aa-bc3a-e4e1ad0df480/0925d411e8e09e31ba7a39a3eb0e29af/aspnetcore-runtime-6.0.8-linux-arm.tar.gz）</strong></p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>本教程假定你沿着Ubuntu 22.04的方向前进，如果你正在使用不同的磁盘，例如Alpine，去 [here]（https://dotnet.microsoft.com/zh-cn/download/dotnet/6.0） 并复制您的distro的适当链接。</strong></p></div><p>一旦文件下载完成，您需要运行以下命令：</p><ol><li><p><code>DOTNET_FILE=dotnet-sdk-6.0.400-linux-arm64.tar.gz</code></p><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>如果您正在使用不同的下载链接，更新此命令中的文件名以匹配您的版本。</strong></p></div></li><li><p><code>export DOTNET_ROOT=/root/.dotnet</code></p><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>我们正在安装.NET 在 <code>/root</code> 中，如果您安装了它，请确保设置您自己的路径！</strong></p></div></li><li><p><code>mkdir -p &quot;$DOTNET_ROOT&quot; &amp;&amp; tar zxf &quot;$DOTNET_FILE&quot; -C &quot;$DOTNET_ROOT&quot;</code></p></li><li><p><code>export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools</code></p></li></ol><p>现在我们需要告诉我们的 shell 来知道未来会话的 <code>dotnet</code> 命令在哪里。 因为以上命令只是告诉当前会话 <code>dotnet</code> 所在位置。</p><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>你将需要Nano 文本编辑器的基本知识，如果你不知道如何使用它，请观看这个[Youtube 视频教程]（https://www.youtube.com/watch?v=DLeATFgGM-A）</strong></p></div><p>要启用此功能，我们需要编辑 <code>/root/.bashrc</code> 文件，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano /root/.bashrc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>页面向下滚动到文件的底部</code> (<code>PGDN</code>) 按钮， 新建一行并粘贴以下文本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> DOTNET_ROOT=/root/.dotnet/</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> PATH=</span><span style="color:#9CDCFE;">$PATH</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">/tools</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>我们正在安装.NET 在 <code>/root</code> 中，如果您安装了它，请确保设置您自己的路径！</strong></p></div><p>保存文件时使用以下组合键：<code>CTRL + X</code>, 输入 <code>Y</code> 然后按Enter。</p><p>通过运行以下命令检查是否正确安装了.NET：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您应该看到一个帮助页面：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">root@localhost:~</span><span style="color:#6A9955;"># dotnet</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="安装mcc" tabindex="-1"><a class="header-anchor" href="#安装mcc" aria-hidden="true">#</a> 安装MCC</h4><p>最后，我们可以安装 MCC。</p><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>如果你有一个32位的ARM处理器，你需要自己构建MCC，看看<a href="#building-row-the-source-code">Building from Source</a>。 还请确保您的架构使用适当的<code>-r</code>参数值。</strong></p></div><p>让我们创建一个将用以下命令存储MCC的文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后输入新创建的文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用以下命令下载MCC：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://github.com/MCCTeam/Minecraft-Console-Client/releases/latest/download/MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用以下命令解压它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">unzip MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您现在可以删除压缩包，我们不再需要它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后用以下方式运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./MinecraftClient</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装后" tabindex="-1"><a class="header-anchor" href="#安装后" aria-hidden="true">#</a> 安装后</h4><p>当你下次运行 Termux 时，你需要用以下方式启动 Ubuntu ： <code>./startubuntu.sh</code></p><p>然后你可以使用 <code>重新启动MCC。/MinecraftClient</code></p><p>要阻止MCC运行，您可以按 <code>CTRL + C</code></p>`,39),te={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},re=e("p",null,[s("为了下载文件，您可以使用我们已安装的 "),e("code",null,"wget"),s(" 文件，只需运行：")],-1),de=e("p",null,[e("code",null,"wget your_link_here"),s("（上面有示例，下面有一个视频教程）。")],-1),pe=e("p",null,"另外，这里有一些 Linux 教程，供刚接触它的人使用：",-1),ue={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},he={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},me={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},be=i('<h2 id="在-vps-上运行" tabindex="-1"><a class="header-anchor" href="#在-vps-上运行" aria-hidden="true">#</a> 在 VPS 上运行</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>这是一个新的章节，如果您发现错误，请在我们的 [Github 仓库] （https://github.com/MCCTeam/Minecraft-Console-Client）中打开一个问题（Issue）来报告。 感谢！</strong></p></div><p><strong>Minecraft控制台客户端</strong> 可以每天24小时、每周7天都在 VPS 运行。</p><ul><li><a href="#what-is-a-vps">什么是 VPS</a></li><li><a href="#prerequisites">基础要求</a></li><li><a href="#where-to-get-a-vps">在哪里获得VPS</a></li><li><a href="#initial-amazon-vps-setup">Amazon VPS 初始设置</a></li><li><a href="#initial-vps-setup">VPS 初始设置</a></li><li><a href="#creating-a-new-user">创建一个新的用户帐户</a></li><li><a href="#installing-net-core-6">安装 .NET Core 6</a></li><li><a href="#installing-mcc-on-a-vps">安装 Minecraft 控制台客户端</a></li></ul><h3 id="什么是-vps" tabindex="-1"><a class="header-anchor" href="#什么是-vps" aria-hidden="true">#</a> 什么是 VPS</h3><p>VPS（<strong>V</strong>irtua <strong>P</strong>rivate <strong>S</strong>erver）是一个远程虚拟电脑，每天24小时、每周7天都在云端运行。 准确地说，它是一个运行在主机操作系统顶端的虚拟机（例如Proxmox）。</p><p>您可以使用 VPS 托管网站或应用程序， 或者游戏服务器，或者您自己的 VPN，或者Minecraft 命令行客户端。</p>',7),ge={href:"https://youtu.be/42fwh_1KP_o",target:"_blank",rel:"noopener noreferrer"},De=e("h3",{id:"基础要求",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基础要求","aria-hidden":"true"},"#"),s(" 基础要求")],-1),_e=e("p",null,"Gitbash（如果您在Windows上）",-1),ye={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},Ee=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"提示"),e("p",null,[e("strong",null,"请确保允许安装将其添加到上下文菜单中")])],-1),fe=e("li",null,[e("p",null,[e("code",null,"ssh"),s(" and "),e("code",null,"ssh-keygen"),s(" 命令 (在 Windows 上，他们可以用 Gitbash访问) 在 macOS 和 Linux 上，它们应该默认是可用的，它不应该搜索如何安装它们)")])],-1),ke=e("p",null,"Linux shell 命令、终端模拟器使用、 SSH 和 Nano编辑器的基本知识。",-1),Ce=e("p",null,"如果您已经知道这一点，请随时跳过。",-1),xe=e("p",null,"如果你被卡住了，请观看这些教程。",-1),we=e("p",null,"如果你是新人，你可以在这里了解：",-1),Se={href:"https://www.youtube.com/watch?v=JsWQUOEL0N8",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},Me={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},Le=i('<h3 id="在哪里获得vps" tabindex="-1"><a class="header-anchor" href="#在哪里获得vps" aria-hidden="true">#</a> 在哪里获得VPS</h3><p>您有两个选项：</p><ul><li><a href="#buying-a-vps">购买VPS</a></li><li><a href="#aws-ec2-vps">免费获取AWS EC2 VPS （12个月免费试用）</a></li></ul><h4 id="购买vps" tabindex="-1"><a class="header-anchor" href="#购买vps" aria-hidden="true">#</a> 购买VPS</h4><p>如果您不想将您的信息提供给亚马逊或者没有借记卡，您可以购买自己的 VPS。</p><p><strong>我需要什么硬件来运行管理MCC？</strong></p><p>MCC 运行起来并不昂贵，因此它基本上可以在任何硬件上运行，如果您只运行 MCC，则无需在 VPS 上花费大量资金，请选择最便宜的选择。</p><p><strong>在哪里获得VPS?</strong></p><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p><strong>在本教程中，我们将使用 <code>Ubuntu 22.04</code>，请确保在购买VPS 时选择它作为操作系统。</strong></p></div><p>一些可靠和廉价的主机服务提供商（按价格/业绩分类）：</p>',10),Ve={href:"https://e-trail.net/vps",target:"_blank",rel:"noopener noreferrer"},Ne=e("p",null,[e("strong",null,"最低价格"),s(": "),e("code",null,"2.50 欧元/月")],-1),Re=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"提示"),e("p",null,"**订购时下拉菜单中没有 Ubuntu 22.04，您必须稍后重新安装或请求支持人员才能执行此操作。")],-1),Oe={href:"https://www.ovhcloud.com/de/vps/",target:"_blank",rel:"noopener noreferrer"},ze=e("p",null,[e("strong",null,"最低价格"),s(": "),e("code",null,"3.57 欧元/月")],-1),He={href:"https://www.hetzner.com/cloud",target:"_blank",rel:"noopener noreferrer"},Ge=e("p",null,[e("strong",null,"最低价格"),s(": "),e("code",null,"4.51 欧元/月")],-1),Ie={href:"https://www.digitalocean.com/pricing/droplets",target:"_blank",rel:"noopener noreferrer"},Ue=e("p",null,[e("strong",null,"最低价格"),s(": "),e("code",null,"4 欧元/月")],-1),We={href:"https://contabo.com/en/vps/",target:"_blank",rel:"noopener noreferrer"},Fe=e("p",null,[e("strong",null,"最低价格"),s(": "),e("code",null,"7 欧元/月")],-1),Be=e("p",null,[e("strong",null,"更好的VPS能够托管多个应用程序，4个CPU内核和8 GB RAM，200 GB SSD")],-1),Ye=i('<p>您也许想要寻找更好的交易。</p><h4 id="aws-ec2-vps" tabindex="-1"><a class="header-anchor" href="#aws-ec2-vps" aria-hidden="true">#</a> AWS EC2 VPS</h4><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p><strong>这将需要您拥有一个有效的借记卡，可以用于互联网和手机号码。 以及将该信息提供给亚马逊公司。</strong></p></div><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>诈骗者经常获取 AWS VPS 并使用它来批量登录被盗的 Microsoft 帐户，某些 AWS IP 地址可能会因此被 Microsoft 阻止，如果是这样，您可能需要切换区域或使用代理。 若您的 IP 已被 Microsoft 封禁，若要调试，请使用 <code>ping &lt;ip&gt;</code>和<code>traceroute &lt;ip&gt;</code> 命令。</strong></p></div><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>与上面的警告相关，如果您使用 Microsoft 登录的问题且您没有被禁止， 您可能想要在您的帐户上检查安全中心并批准VPS的登录。 一些用户可以是这种情况。</strong></p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您没有被封禁，有时获取密钥可能需要一些时间，试着给它一两分钟的时间。 如果它仍然挂起，按下一些键刷新屏幕，或者尝试重新启动并运行。 如果它仍然出现，请使用 tmux 代替屏幕。</strong></p></div><p>注册 AWS 并输入您所有的账单信息和电话号码。</p><p>完成后，您可以继续 <a href="#setting-up-an-aws-vps">设置 Amazon VPS</a>。</p><h3 id="amazon-vps-初始设置" tabindex="-1"><a class="header-anchor" href="#amazon-vps-初始设置" aria-hidden="true">#</a> Amazon VPS 初始设置</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您不使用 AWS，请跳过此部分。 转到<a href="#initial-vps-setup">初始 VPS 设置</a></strong></p></div><p>当您注册并打开 <code>AWS Console</code>点击页面顶部的搜索字段并搜索： <code>EC2</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>请确保选择离您最近的区域，以最大程度地减少延迟</strong></p></div><p>单击<strong>启动实例</strong>按钮。</p><p>用您您喜欢的名称填写 <code>名称</code> 字段。</p><p><img src="'+l+'" alt="VPS 名称"></p><p>在 <strong>Application and OS images</strong>中选择<code>Ubuntu Server 22.04 LTS (HVM), SSD Volume Type</code>。</p><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p>**请确保它旁边有 <code>Free tier eligible</code> **</p></div><p><img src="'+o+'" alt="VPS 选择操作系统"></p><p>对于 <strong>Instance type</strong> 选择 <code>t2.micro</code>。</p><p>对于 **Key pair (login) ** 点击 ** Create new key pair ** 并命名它 <code>VpsRoot</code>，保留其余设置为默认设置并点击 ** Create key pair **这将生成一个将自动下载的 RSA 私钥。</p><div class="custom-container danger"><p class="custom-container-title">重要警告</p><p><strong>请确保您将此文件保存在一个安全的地方，不要丢失它， 这是最重要的，因为它用于访问 VPS 的 root / admin 帐户。 没有它，您将无法访问 VPS 的 root 帐户！ 也不要让它落入坏人之手。</strong></p></div><p><img src="'+c+'" alt="VPS 实例类型"></p><p>对于 ** Network settings ** 请检查以下复选框：</p><ul><li><code>Allow SSH traffic from</code> (Anywhere)</li><li><code>Allow HTTPs traffic from the internet</code></li><li><code>Allow HTTP traffic from the internet</code></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>来自任何地方的 SSH 流量对于安全性来说不是最好的选择，您可能需要输入要手动访问 VPS 的设备的IP地址。</strong></p></div><p><img src="'+t+'" alt="VPS 网络设置"></p><p>对 <strong>Storage</strong> 输入 <code>30</code>。</p><p><img src="'+r+`" alt="VPS 配置存储"></p><p>最后， 查看 <strong>Summary</strong> 确认一切都与教程一致，您将不会被收取费用，然后点击 <strong>Launch instance</strong>。 一旦您点击了按钮，这个实例需要几分钟时间才能启用并运行。</p><p>一旦实例启动并运行，前往它的详细信息并复制 <code>Public DNS v4 IP </code>。</p><p>您现在需要登录，转到您的文件夹，保存您已经生成和下载的私钥（请确保您为它创建一个新的文件夹）不保留在下载文件夹中，右键点击空的白色空间（不在文件上），如果您在Windows上点击 <strong>Git Bash here</strong>， 在 mac OS 和 Linux 上点击 <strong>Open Terminal</strong>（或任何名称）。</p><p>要使用 SSH 登录，您将使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;name of your private root key here&gt; ubuntu@&lt;your public dns v4 ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong><code>&lt;</code> 和 <code>&gt;</code> 不用输入，这只是占位符的标记！</strong></p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong><code>ubuntu</code> 是 AWS Ubuntu 默认 root 帐户用户名！</strong></p></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i VpsRoot.pem ubuntu@ec2-3-71-108-69.eu-central-1.compute.amazonaws.com</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您提供了正确的信息，您应该会收到 <code>Welcome to Ubuntu 20.04.5 LTS</code> 消息。</p><p>现在您可以继续 <a href="#creating-a-new-user">Creating a new user</a></p><h3 id="vps-初始设置" tabindex="-1"><a class="header-anchor" href="#vps-初始设置" aria-hidden="true">#</a> VPS 初始设置</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>此部分如果适用于不使用 AWS 的用户，如果您使用 AWS，请跳过它</strong></p></div><p>当您订购VPS时，很可能您会被要求提供 root 帐户名称和密码， 如果是的话，请将帐户命名为 <code>root</code> 并给它一个您选择的密码。</p><p>其他选项是，一旦设置完成，您将在电子邮件中获取您的登录信息。</p>`,43),Ke={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},qe=e("code",null,"ssh",-1),$e=i(`<p>如果你在 Windows 打开 <code>Git Bash</code>，在 mac OS 和 Linux 上打开 <code>终端</code> 并输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh &lt;username&gt;@&lt;ip&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果你给主机分配了<code>22</code>以外的SSH端口，你需要添加<code>-p &lt;port here&gt;</code> 在用户名之前（例如 <code>ssh -p &lt;port here&gt; &lt;username&gt;@&lt;ip&gt;</code>）或者添加 <code>：&lt;port&gt;</code> 在 IP 之后（例如 <code>ssh &lt;username&gt;@&lt;ip&gt;:&lt;port&gt;</code>）</strong></p></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>端口示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -p 2233 root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦你登录，如果你的提供商已经设置了一个 Linux 提示和欢迎消息，你应该会看到。</p><h3 id="创建一个新用户" tabindex="-1"><a class="header-anchor" href="#创建一个新用户" aria-hidden="true">#</a> 创建一个新用户</h3><p>一旦您登录到您的 VPS 后，您需要创建一个新的用户并给予它访问 SSH 的权限。</p><p>在这个教程中，我们将使用 <code>mcc</code> 作为将运行MCC的用户帐户的名称。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>你可能想知道我们为什么要创建一个单独的用户帐户并且只能通过 SSH 访问它。 这是出于安全原因，如果你不想这样做，你可以自由跳过它，但是小心。</strong></p></div><p>要创建一个名为 <code>mcc</code> 的新用户，请执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo useradd mcc -m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们需要给它设置一个密码，执行以下命令，输入密码并确认它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo passwd mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>当您键入密码时，它不会显示在屏幕上，但您确实正在输入它。</strong></p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>请确保您有一个强密码！</strong></p></div><p>现在我们需要给予我们的用户帐户的管理员权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo usermod -aG sudo mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们要把它设置成 bash：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo chsh mcc -s /bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们需要登录 <code>mcc</code> 用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">su mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现询问提示时请输入密码。</p><p>导航到 <code>mcc</code> 用户主目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个新的 <code>.ssh</code> 目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个新的空文件，名字是 <code>authorized_key</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">touch authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不要关闭 Git bash/终端模拟器。</p><p>在您的电脑上，创建一个新文件夹，存储您将要用来登录到用户账户的 SSH 密钥。</p><p>打开文件夹，然后右键单击空的白色空间（不在文件上）， 如果您在Windows上点击 <strong>Git Bash here</strong>，在 mac OS 和 Linux 上点击 <strong>打开终端</strong>（或它被叫做什么）。</p><p>输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh-keygen -t RSA -b 4096</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入要输入的密钥文件的名称： <code>MCC_key</code>，按下Enter。</p><p>当被问到一个 <code>passphrase</code>时，请输入您选择的密码并确认它。 如果你把它写在一张纸上，请确保它的强度和你可以记住它。</p><p>这将生成一个私钥和一个公钥，您可以用它来登录 VPS 作为您创建的用户。</p><p>现在打开 <code>MCC_Key.pub</code> 文件，由您选择的文本编辑器并将其内容复制到剪贴板。</p><p>返回 Git Bash/Terminal 模拟器并执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install nano -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将在您的 VPS 上安装 Nano 编辑器。</p><p>现在我们需要让您的 VPS 上的 SSH 服务知道你新生成的 SSH 密钥对。</p><p>请确保您在 <code>/home/mcc/.ssh</code> 文件夹中，您可以通过执行以下操作确认：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">pwd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果它没有输出到 <code>/home/mcc/.ssh</code>，请导航到它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /home/mcc/.ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在您需要打开 <code>authorized_keys</code> 文件与 nano 编辑器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在点击右键将 <code>MCC_Key.pub</code> 复制的内容粘贴到 nano 编辑器。</p><p>使用 <code>CTRL + O</code>保存文件，按下Enter，然后用 <code>CTRL + X</code> 退出它。</p><p>现在我们需要配置SSHD服务，让我们使用生成的 SSH 密钥登录， 为此，我们需要使用 nano 编辑 <code>/etc/ssh/sshd_config</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo nano /etc/ssh/sshd_config</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到 <code>#Pubkeyauthentication 是</code> 行，并删除 <code>#</code> 前面以取消对该行的注释。</p><p>然后找到 <code>#authorizedKeysFile .sh/authorized_keys .ssh/authorized_keys2</code> 行，并删除 <code>#</code> 以取消对该行的注释。</p><p>此外，为了更好的安全，你可以做以下工作：</p><ul><li>将 <code>PermitRootLogin</code> 设置为 <code>yes</code></li><li>将 <code>端口</code> 更改为您选择的数值（22-65000）（请确保至少是 2 位数字并避免其他应用使用的共同端口如: 21/80/35/8080/3000 等...)</li><li>删除了 <code>#</code> 并将其设置为 <code>yes</code> 以此取消注释 <code>#PasswordAuthority</code>（这将禁用密码登录，您将只能使用SSH密钥登录！)</li></ul><p>使用 <code>CTRL + O</code>保存文件，按下Enter，然后使用 <code>CTRL + X</code> 关闭它。</p><p>现在我们需要重启 SSHD 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl restart sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们检查一切是否正常工作:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl status sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果所有的配置都应该是原来的配置，你应该把 <code>activity（运行）</code> 看作是服务状态。</p><p>如果没有，请重新打开配置文件并检查错误。</p><p>按 <code>q</code> 退出日志模式。</p><p>使用 exit 命令从 <code>mcc</code> 用户注销，\`\`然后通过再次输入 <code>exit</code> 从 root <code>ubuntu</code> 用户注销。</p><p>现在我们可以使用我们的私有 <code>MCC_Key</code> 文件登录用户。</p><p>命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;path to the MCC_Key private key&gt; mcc@&lt;ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i MCC_Key mcc@3.71.108.69</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您更改了<code>端口</code>，请确保您添加了一个 <code>-p &lt;your port here&gt;</code>-i<code> 之后的选项 &lt;key&gt;选项（例如，</code>ssh -i MCC_Key -p 8973 mcc@3.71.108.69\`）!</strong></p></div><p>如果一切正确，您应该看到一个 Linux 提示和欢迎消息，如果您的提供商已经设置。</p><p>您可以使用 <code>whoami</code> 查看您的用户名。</p><p>现在您可以安装 .NET Core 6 和 MCC。</p><h3 id="安装-net-core-6" tabindex="-1"><a class="header-anchor" href="#安装-net-core-6" aria-hidden="true">#</a> 安装 .NET Core 6</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>如果您的 VPS 有一个 ARM 处理器，请按照 <a href="#installing-net-on-arm">this</a>部分文档进行操作，然后返回此文档之后的部分。</strong></p></div><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>使用 Ubuntu 新版本的 .NET Core 6 4 你可能会遇到以下错误：\`发生了一个致命错误。文件夹 [/usr/share/dotnet/host/fxr] 不包含任何版本号子文件夹，如果你看到了这条信息，请使用 [这个解决方案]（https://github.com/dotnet/sdk/issues/27082#issuecomment-1211143446）</strong></p></div><p>登录您已经创建的用户。</p><p>更新系统软件包和软件包管理库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt update -y &amp;&amp; sudo apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 <code>wget</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install wget -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转到您的主目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载 Microsoft 存储库文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 Microsoft 仓库添加到包管理器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo dpkg -i packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件，我们不再需要它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，安装 .NET Core 6：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt-get update -y &amp;&amp; sudo apt-get install -y dotnet-sdk-6.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行下面的命令来检查一切是否正确安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您应该看到：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100),Qe={href:"https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-ubuntu#2204",target:"_blank",rel:"noopener noreferrer"},Xe=i('<p>如果它已经成功，您现在可以安装 MCC。</p><h3 id="在-vps-上安装-mcc" tabindex="-1"><a class="header-anchor" href="#在-vps-上安装-mcc" aria-hidden="true">#</a> 在 VPS 上安装 MCC</h3><p>现在你有 .NET Core 6 和一个用户帐户，您应该安装 <code>screen</code> 实用工具， 您将需要这么做，以便在您关闭了 SSH 会话后保持MCC运行(如果您没有它的话)。 MCC将在您断开连接后停止工作)。 您可以看到 <code>screen</code> 就像一个窗口， 除了在终端中，它允许您同时打开多个“窗口”。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>还有一个 Docker 方法，如果你在使用 Docker，你不需要<code>screen</code> 程序。</strong></p></div>',4),Je={href:"https://youtu.be/_ZJiEX4rmN4",target:"_blank",rel:"noopener noreferrer"},Ze=i(`<p>要安装 <code>screen</code> 执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install screen -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在您可以安装 MCC：</p><ul><li><a href="#download-a-compiled-binary">下载源码</a></li><li><a href="#building-from-the-source-code">从源码构建</a></li><li><a href="#using-docker">使用 Docker 运行</a>（不需要 <code>屏幕</code> 命令）</li></ul><p>怎么使用 <code>screen</code> 命令？</p><div class="custom-container warning"><p class="custom-container-title">警告</p><p><strong>如果您的屏幕命令有问题，如输出格式不正确或程序处理/冻结，请尝试使用 tmux，点击 [这里]（https://www.youtube.com/watch?v=Yl7NFenTgIo）来学习如何使用它。</strong></p></div><p>要启动屏幕，请输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -S mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong><code>mcc</code>是这里屏幕上的名字，你可以使用你喜欢的任何东西，但如果你使用了不同的名字的话。请确保你在以下命令中使用该命令而不是<code>mcc</code>。</strong></p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>您只需要屏幕一次，但如果您重启 VPS，您需要在每次重启时启动它。</strong></p></div><p>现在您将进入屏幕，现在您可以启动 MCC 并从屏幕中分离。</p><p>要从屏幕上分离，请按 <code>CTRL + A + D</code>。</p><p>要重新连接/返回到屏幕，请执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -r mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您意外关闭了 SSH 会话而没有从屏幕分离，它可能仍然被绑定，要分离它使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -d mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要列出屏幕，您可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要停止 MCC，您可以点击 <code>CTRL + D</code>（几次）。</p>`,19);function je(es,ss){const n=p("ExternalLinkIcon");return u(),h("div",null,[v,e("ul",null,[e("li",null,[e("a",b,[s("通过 Daenges 在 Windows 上安装"),a(n)])]),e("li",null,[e("a",g,[s("在 Windows 上安装和挂机和更多 By Dexter113"),a(n)])])]),D,e("p",null,[s("您可以从 Git Hub上的发布部分下载最新版本的编译二进制文件： "),e("a",_,[s("下载"),a(n)])]),y,e("p",null,[s("We recommend you to download our precompiled binary file from "),e("a",E,[s("GitHub"),a(n)]),s(".")]),f,k,C,e("ul",null,[e("li",null,[e("a",x,[s("Git"),a(n)])]),e("li",null,[e("a",w,[s(".NET 7.0 or new-er"),a(n)]),s(" or "),e("a",S,[s("Visual Studio"),a(n)]),s(" configured for C# app development")])]),T,e("p",null,[s("安装 "),e("a",M,[s("Git"),a(n)])]),e("ol",null,[A,P,L,e("li",null,[s("通过输入结束执行以下命令来克隆 "),e("a",V,[s("GitHub 存储库"),a(n)])])]),N,e("ol",null,[e("li",null,[s("在 Crowdin 上访问 "),e("a",R,[s("MCC项目主页"),a(n)]),s("。")]),O]),z,e("ul",null,[e("li",null,[H,e("ul",null,[G,e("li",null,[e("p",null,[e("a",I,[s("在 macOS 上安装 Git"),a(n)])])])])]),e("li",null,[U,e("ul",null,[e("li",null,[e("a",W,[s("在 Linux 上安装.NET"),a(n)])]),e("li",null,[e("a",F,[s("在 macOS 上安装.NET"),a(n)])])])])]),B,e("ol",null,[e("li",null,[s("通过输入结束执行以下命令来克隆 "),e("a",Y,[s("GitHub 存储库"),a(n)])])]),K,e("div",q,[$,e("p",null,[e("strong",null,[s("如果你不知道有关Linux的任何信息，你需要看"),e("a",Q,[s("这个视频"),a(n)]),s("熟悉基本命令。")])])]),X,e("div",J,[Z,e("p",null,[e("strong",null,[s("Termux 的Play 商店版本已经过时，不支持，不要使用，请使用 "),e("a",j,[s("Github one"),a(n)]),s("。")])])]),e("p",null,[s("转到 "),e("a",ee,[s("Termux Github 最新版本"),a(n)]),s(", 下载 "),se,s(", 解压缩它并运行它。")]),ne,e("ol",null,[ae,e("li",null,[s("观看 "),e("a",ie,[s("YouTube教程以安装 Ubuntu"),a(n)])])]),le,e("p",null,[s("在你安装了依赖关系后，现在是安装.NET的时候了，你可以按照这个教程或者 "),e("a",oe,[s("Microsoft One"),a(n)]),s("。")]),ce,e("p",null,[s("要编辑配置/设置，您需要一个文本编辑器，我们推荐使用Nano。 如果您遵循了上面的安装步骤，您应该熟悉，如果不熟悉，请查阅 "),e("a",te,[s("本教程"),a(n)]),s("。")]),re,de,pe,e("ul",null,[e("li",null,[e("a",ue,[s("ExplainingComputer 的 Linux 终端介绍"),a(n)])]),e("li",null,[e("a",he,[s("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),a(n)])]),e("li",null,[e("a",me,[s("Linux Crash Course - 学习Linux TV wget 命令"),a(n)])]),e("li",null,[e("a",ve,[s("Linux Basics：怎么通过 webpwized 解压缩文件（tar, gzip）by webpwnized"),a(n)])])]),be,e("p",null,[s("这是一个 "),e("a",ge,[s("Youtube 视频"),a(n)]),s(" 如果您有兴趣，将会更详细地解释它。")]),De,e("ol",null,[e("li",null,[_e,e("p",null,[s("下载并安装 "),e("a",ye,[s("Gitbash"),a(n)]),s(".")]),Ee]),fe,e("li",null,[ke,Ce,xe,we,e("ul",null,[e("li",null,[e("a",Se,[s("什么是 Linux？ by Bennet Bytes"),a(n)])]),e("li",null,[e("a",Te,[s("ExplainingComputer 的 Linux 终端介绍"),a(n)])]),e("li",null,[e("a",Me,[s("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),a(n)])]),e("li",null,[e("a",Ae,[s("Linux Crash Course - 学习Linux TV wget 命令"),a(n)])]),e("li",null,[e("a",Pe,[s("Linux Basics：怎么通过 webpwized 解压缩文件（tar, gzip）by webpwnized"),a(n)])])])])]),Le,e("ul",null,[e("li",null,[e("p",null,[e("a",Ve,[s("E-Trail"),a(n)])]),Ne,Re]),e("li",null,[e("p",null,[e("a",Oe,[s("OVH Cloud"),a(n)])]),ze]),e("li",null,[e("p",null,[e("a",He,[s("Hetzner Cloud"),a(n)])]),Ge]),e("li",null,[e("p",null,[e("a",Ie,[s("Digital Ocean"),a(n)])]),Ue]),e("li",null,[e("p",null,[e("a",We,[s("Contabo"),a(n)])]),Fe,Be])]),Ye,e("p",null,[s("一旦你有了 root 登录帐户信息，你需要"),e("a",Ke,[s("Gitbash"),a(n)]),s(" 在 Windows 和 "),qe,s(" 在 macOS 或 Linux 上（如果你没有它，请搜索如何安装它，这很简单）。")]),$e,e("p",null,[s("如果您没有获得这个输出且安装失败，"),e("a",Qe,[s("请尝试其它方法"),a(n)]),s("。")]),Xe,e("p",null,[s("您也可以从 "),e("a",Je,[s("这个Youtube教程"),a(n)]),s(" 了解屏幕命令。")]),Ze])}const is=d(m,[["render",je],["__file","installation.html.vue"]]);export{is as default};
