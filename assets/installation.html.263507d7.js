import{_ as t,a as i,b as l,c as r,d as c}from"./VPS_ConfigureStorage.f14e3f98.js";import{_ as d,r as p,o as u,c as h,a as e,b as s,d as o,e as a}from"./app.b292e524.js";const m={},g=a('<h1 id="インストール" tabindex="-1"><a class="header-anchor" href="#インストール" aria-hidden="true">#</a> インストール</h1><ul><li><a href="#youtube-tutorials">YouTube チュートリアル</a></li><li><a href="#download-a-compiled-binary">コンパイル済みバイナリをダウンロードする</a></li><li><a href="#building-from-the-source-code">ソース コードからビルドする</a></li><li><a href="#using-docker">Docker で実行する</a></li><li><a href="#run-on-android">Android で実行する</a></li><li><a href="#run-on-a-vps">VPS で MCC を実行し続ける</a></li></ul><h2 id="youtube-チュートリアル" tabindex="-1"><a class="header-anchor" href="#youtube-チュートリアル" aria-hidden="true">#</a> YouTube チュートリアル</h2><p>文章を読むのが苦手な方は、コミュニティが作成した動画のチュートリアルを YouTube でご利用いただけます。</p>',4),v={href:"https://www.youtube.com/watch?v=BkCqOCa2uQw",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.youtube.com/watch?v=FxJ0KFIHDrY",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"コンパイル済みバイナリをダウンロードする",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#コンパイル済みバイナリをダウンロードする","aria-hidden":"true"},"#"),s(" コンパイル済みバイナリをダウンロードする")],-1),f={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},w=e("h2",{id:"ソース-コードからビルドする",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ソース-コードからビルドする","aria-hidden":"true"},"#"),s(" ソース コードからビルドする")],-1),_={href:"https://github.com/MCCTeam/Minecraft-Console-Client/releases",target:"_blank",rel:"noopener noreferrer"},D=e("p",null,"ただし、ソース コードからプログラムをビルドする場合は、このガイドに従ってください。",-1),k=e("h3",{id:"windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows","aria-hidden":"true"},"#"),s(" Windows")],-1),E=e("p",null,"必要なもの:",-1),C={href:"https://www.git-scm.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://dotnet.microsoft.com/en-us/download",target:"_blank",rel:"noopener noreferrer"},T={href:"https://visualstudio.microsoft.com/",target:"_blank",rel:"noopener noreferrer"},S=e("h4",{id:"git-を使用してクローンを作成する",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-を使用してクローンを作成する","aria-hidden":"true"},"#"),s(" Git を使用してクローンを作成する")],-1),M={href:"https://www.git-scm.com/",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,"ソース コードを保存する新しいフォルダーを作成します。",-1),N=e("li",null,[s("作成したフォルダーを開き、"),e("code",null,"SHIFT"),s(" を押したまま、フォルダーの何もないところで "),e("code",null,"右クリック"),s(" します。")],-1),P=e("li",null,[s("右クリック メニューから "),e("code",null,"Git Bash Here"),s(" を選択します。")],-1),L={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},R=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>リポジトリのクローンが作成されたら、<code>Git Bash</code> ターミナル エミュレーターを閉じます。</li><li>新しく複製されたフォルダーを開きます。</li></ol><h4 id="翻訳リソースをダウンロードする-任意" tabindex="-1"><a class="header-anchor" href="#翻訳リソースをダウンロードする-任意" aria-hidden="true">#</a> 翻訳リソースをダウンロードする (任意)</h4>`,3),O={href:"https://crowdin.com/project/minecraft-console-client",target:"_blank",rel:"noopener noreferrer"},I=a("<li>ダウンロードするには、Crowdin にログインする必要があります。</li><li>翻訳リソースをダウンロードする言語を選びます。</li><li><code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>Translations</code> -&gt; <code>MCC in-app text</code> を探します。</li><li>行末の <code>•••</code> ボタンをクリックします。</li><li><code>Download</code> を選択して、ファイルをフォルダー &lt;0&gt;/MinecraftClient/Resources/Translations/&lt;/0&gt; に保存します。</li><li><code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>ConfigComments</code> -&gt; <code>Comments in the settings file</code> を探します。</li><li>行末の <code>•••</code> ボタンをクリックします。</li><li><code>Download</code> を選択して、ファイルをフォルダー <code>/MinecraftClient/Resources/ConfigComments/</code> に保存します。</li><li><code>MinecraftClient</code> -&gt; <code>Resources</code> -&gt; <code>AsciiArt</code> -&gt; <code>ASCII Arts (Please use fixed-width fonts for editing)</code> を探します。</li><li>行末の <code>•••</code> ボタンをクリックします。</li><li><code>Download</code> を選択して、ファイルをフォルダー <code>/MinecraftClient/Resources/AsciiArt/</code> に保存します。</li><li>別の言語の翻訳リソースもダウンロードする場合は、手順 3 に戻ります。</li>",12),V=a(`<h4 id="visual-studio-を使用してビルドする" tabindex="-1"><a class="header-anchor" href="#visual-studio-を使用してビルドする" aria-hidden="true">#</a> Visual Studio を使用してビルドする</h4><ol><li>Visual Studio で <code>MinecraftClient.sln</code> を開きます。</li><li><code>ソリューション エクスプローラー</code> で <code>MinecraftClient</code> ソリューションを右クリックします。</li><li><code>プロパティ</code> をクリックします。</li><li><code>ビルド</code> タブを開き、構成 <code>リリース</code> を選択します。</li><li><code>CTRL+S</code> を押してファイルを閉じます。</li><li><code>ソリューション エクスプローラー</code> で <code>MinecraftClient</code> ソリューションを右クリックします。</li><li><code>ビルド</code> を選択します。</li></ol><p>ビルドが成功すると、コンパイル済みバイナリ <code>MinecraftClient.exe</code> が <code>MinecraftClient/bin/Release/net6.0/win-x64/publish</code> フォルダーに保存されます。</p><h4 id="visual-studio-を使用せずに-net-を使用して手動でビルドする" tabindex="-1"><a class="header-anchor" href="#visual-studio-を使用せずに-net-を使用して手動でビルドする" aria-hidden="true">#</a> Visual Studio を使用せずに .NET を使用して手動でビルドする</h4><ol><li>クローンまたはダウンロードした <code>Minecraft-Console-Client</code> フォルダーを開きます。</li><li>PowerShell を開きます。(<code>SHIFT</code> を押したまま、フォルダーの何もないところで <code>右クリック</code> し、<code>PowerShell を開く</code> を選択するか、Windows エクスプローラーで &lt;0&gt;ファイル&lt;/0&gt; -&gt; &lt;0&gt;PowerShell を開く&lt;/0&gt; を選択します。)</li><li>次のコマンドを実行してプロジェクトをビルドします。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r win-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ビルドが成功すると、コンパイル済みバイナリ <code>MinecraftClient.exe</code> が <code>MinecraftClient/bin/Release/net6.0/win-x64/publish</code> フォルダーに保存されます。</p><h3 id="linux-と-macos" tabindex="-1"><a class="header-anchor" href="#linux-と-macos" aria-hidden="true">#</a> Linux と macOS</h3><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Linux を使用している場合は、自分で Git をインストールできると仮定します。 インストール方法がわからない場合は、Linux ディストリビューションを検索してみてください。 (Debian ベースのディストリビューション: <code>apt install git</code>、Arch ベース: <code>pacman -S git</code>)</strong></p></div><p>必要なもの:</p>`,10),H=e("p",null,"Git",-1),F=e("li",null,[e("p",null,"Linux:")],-1),z={href:"https://git-scm.com/download/mac",target:"_blank",rel:"noopener noreferrer"},U=e("p",null,".NET SDK 6.0 以降",-1),G={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.microsoft.com/en-us/dotnet/core/install/macos",target:"_blank",rel:"noopener noreferrer"},W=e("h4",{id:"git-を使用してクローンを作成する-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-を使用してクローンを作成する-1","aria-hidden":"true"},"#"),s(" Git を使用してクローンを作成する")],-1),Y=e("li",null,"ターミナル エミュレーターを開き、MCC を保存するフォルダーに移動します。",-1),q={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},K=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),j={start:"3"},$=e("li",null,[e("p",null,[s("クローンを作成したフォルダーに移動します。("),e("code",null,"Minecraft-Console-Client"),s(" フォルダーである必要があります)")])],-1),Q=e("li",null,[e("p",null,[e("a",{href:"#%E7%BF%BB%E8%A8%B3%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E3%82%BF%E3%82%99%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%88%E3%82%99%E3%81%99%E3%82%8B-%E4%BB%BB%E6%84%8F"},"翻訳リソースをダウンロード"),s("して、英語以外の言語を利用することもできます。")])],-1),X=e("p",null,"次のコマンドを実行してプロジェクトをビルドします。",-1),J=a(`<p>Linux の場合:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r linux-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),Z={class:"custom-container tip"},ee=e("p",{class:"custom-container-title"},"ヒント",-1),se={href:"https://learn.microsoft.com/ja-jp/dotnet/core/rid-catalog#linux-rids",target:"_blank",rel:"noopener noreferrer"},ne=e("code",null,"-r linux-64",-1),oe=e("code",null,"-r RID_NAME",-1),ae=e("code",null,"-r linux-arm64",-1),te=a(`<p>macOS の場合:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet publish MinecraftClient -f net7.0 -r osx-x64 --no-self-contained -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),ie={class:"custom-container tip"},le=e("p",{class:"custom-container-title"},"ヒント",-1),re={href:"https://learn.microsoft.com/ja-jp/dotnet/core/rid-catalog#macos-rids",target:"_blank",rel:"noopener noreferrer"},ce=e("code",null,"-r osx-64",-1),de=e("code",null,"-r RID_NAME",-1),pe=e("code",null,"-r osx.12-arm64",-1),ue=a('<p>ビルドが成功すると、コンパイル済みバイナリ <code>MinecraftClient</code> が次のフォルダーに保存されます。</p><ul><li>Linux: <code>MinecraftClient/bin/Release/net7.0/linux-x64/publish/</code></li><li>macOS: <code>MinecraftClient/bin/Release/net7.0/osx-x64/publish/</code></li></ul><h2 id="docker-を使用する" tabindex="-1"><a class="header-anchor" href="#docker-を使用する" aria-hidden="true">#</a> Docker を使用する</h2><p>必要なもの:</p><ul><li>Git</li><li>Docker</li></ul><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>このセクションは詳しい知識があるユーザー向けです。Git または Docker のインストール方法がわからない場合は、Git の他のセクションを確認して、システムに Docker をインストールする方法を検索してください。</strong></p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>Docker は現在動作しますが、MCC がクラッシュするため、コンテナーをインタラクティブ モードで起動する必要があります。この問題の改善に取り組んでいます。</strong></p></div>',7),he={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},me=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">git clone https://github.com/MCCTeam/Minecraft-Console-Client.git --recursive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>Minecraft-Console-Client/Docker</code> に移動します。</li><li>次のコマンドを使用してイメージをビルドします。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker build -t minecraft-console-client:latest </span><span style="color:#DCDCAA;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Docker を使用してコンテナーを起動する</strong></p><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>ConsoleInteractive には、ヘッドレス モードでコンテナーが起動されるとクラッシュするバグがあるため、インタラクティブ モードを使用する必要があります。 従来の方法でコンテナーを再起動せずに、コンテナーを停止し、インタラクティブ モード (次のコマンド) でコンテナーを起動します。その後、<code>CTRL+P</code> と <code>CTRL+Q</code> で切り離します。</strong></p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># ボリュームをマウントしたくない場合は -v パラメーターを省略することができますが、.ini ファイルを編集するのが難しくなります。</span></span>
<span class="line"><span style="color:#D4D4D4;">docker run -it -v &lt;PATH_ON_YOUR_MACHINE_TO_MOUNT&gt;:/opt/data minecraft-console-client:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ログインできるようになり、クライアントが実行されます。</p><p>クライアントから切り離してバックグラウンドで実行し続けるには、<code>CTRL+P</code> を押してから <code>CTRL+Q</code> を押します。</p><p>再接続するには <code>docker attach</code> コマンドを使用します。</p><p><strong>docker-compose を使用してコンテナーを起動する</strong></p><p>デフォルトでは、コンテナーのボリュームは <code>docker-compose.yml</code> と同じ場所にある <code>data</code> フォルダーにマッピングされます。</p><p>ボリュームをマッピングしたくない場合は、次のようにボリューム セクション全体をコメントアウトまたは削除する必要があります。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">#volumes:</span></span>
<span class="line"><span style="color:#6A9955;">#- &#39;./data:/opt/data&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>起動する前に、<code>docker-compose.yml</code> が保存されているディレクトリを開いていることを確認してください。 次のコマンドを使用してコンテナーを起動します。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose run MCC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用後は次のコマンドを使用して、必ずコンテナーを削除してください。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>.ini ファイルを使用してデータ (ユーザー名、パスワード、サーバー) を入力した場合は、次のコマンドを使用してコンテナーを起動することができます。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose up</span></span>
<span class="line"><span style="color:#D4D4D4;">docker-compose up -d </span><span style="color:#6A9955;">#for deamonized running in the background</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker-compose up</code> を使用してクライアントと対話することはできません。 対話する場合は、最初の方法 <code>docker-compose run MCC</code> を使用してください。</p><p>次のコマンドを使用してコンテナーを停止したり削除したりすることができます。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker-compose down</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="android-で実行する" tabindex="-1"><a class="header-anchor" href="#android-で実行する" aria-hidden="true">#</a> Android で実行する</h2><p>It is possible to run the Minecraft Console Client on Android through Termux and Ubuntu 22.04 in it, however it requires a manual setup with a lot of commands, be careful no to skip any steps. Note that this might take anywhere from 10 to 20 minutes or more to do depending on your technical knowledge level, Internet speed and CPU speed.</p><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>このセクションは少し技術的になりますが、できるだけシンプルにするために最善を尽くします。 うまくいかなかった場合や問題が発生した場合は、GitHub リポジトリで気軽に Discussion を開いてください。</strong></p></div>`,25),ge={class:"custom-container tip"},ve=e("p",{class:"custom-container-title"},"ヒント",-1),be={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},ye=a('<div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>手順を簡略化するために、すべて root アカウントにインストールします。ユーザー アカウントを作成する場合は、ホーム ディレクトリで <code>/root</code> ディレクトリを参照するコマンドを必ず更新してください。</strong></p></div><h3 id="インストール-1" tabindex="-1"><a class="header-anchor" href="#インストール-1" aria-hidden="true">#</a> インストール</h3><h4 id="termux" tabindex="-1"><a class="header-anchor" href="#termux" aria-hidden="true">#</a> Termux</h4><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>PlayStore にある Termux は更新されていないため、GitHub の Termux を使用してください。</strong></p></div>',4),fe={href:"https://github.com/termux/termux-app/releases/latest/",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"debug_universal.apk",-1),_e=a('<div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>.apk ファイルを実行できない場合は、ファイル マネージャー アプリを使用してサード パーティのアプリをインストールする権限を許可します。</strong></p></div><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>Termux を開いたら、通知ドロワーで Termux の通知を展開します。<code>Acquire wakelock</code> を選択して、バッテリー最適化の除外権限を許可してください。 これを行わないと、パフォーマンスが低下し、Termux がバックグラウンドで実行している際に Android システムによって強制終了される場合があります。</strong></p></div><h4 id="ubuntu-22-04-をインストールする" tabindex="-1"><a class="header-anchor" href="#ubuntu-22-04-をインストールする" aria-hidden="true">#</a> Ubuntu 22.04 をインストールする</h4><p>このセッションは、次の 2 つの方法があります。</p>',4),De=e("li",null,"このテキスト チュートリアルを見る。",-1),ke={href:"https://www.youtube.com/watch?v=5yit2t7smpM",target:"_blank",rel:"noopener noreferrer"},Ee=a(`<div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Youtube チュートリアルを視聴する場合は、1:58 以降は視聴しないでください。以降の手順は不要で、混乱します。</strong></p></div><p>Ubuntu 22.04 を Termux にインストールするには、<code>wget</code> と <code>proot</code> が必要です。次のステップでインストールします。</p><p>Termux をインストールして開いたら、次のコマンドを順番に実行します。</p><ol><li><code>pkg update</code></li><li><code>pkg upgrade</code></li><li><code>pkg install proot wget</code></li></ol><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>update や upgrade コマンドを処理している際に「Y」または「N」を入力するよう求められた場合は、「Y」と入力して <code>ENTER</code> キーを押します。</strong></p></div><p>次のコマンドを使用してインストール スクリプトをダウンロードします。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://raw.githubusercontent.com/MFDGaming/ubuntu-in-termux/master/ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>スクリプトがダウンロードされたら、次のコマンドを実行します。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">bash ubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>確認メッセージが表示されたら、<code>Y</code> と入力して <code>ENTER</code> を押します。</p><p>インストールが完了したら、次のコマンドを使用して Ubuntu を起動できます。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./startubuntu.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Termux を開く際に、Ubuntu にアクセスするにはこのコマンドを使用する必要があります。</strong></p></div><h4 id="arm-に-net-をインストールする" tabindex="-1"><a class="header-anchor" href="#arm-に-net-をインストールする" aria-hidden="true">#</a> ARM に .NET をインストールする</h4><p>Since there are issues installing .NET 6.0 via the APT package manager at the time of writing, we will have to install it manually.</p><p>First we need to update the APT package manager repositories and install dependencies.</p><p>To update the APT repositories, run the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt update -y &amp;&amp; apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After you did it, we need to install dependencies for .NET, with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">apt install wget nano unzip libc6 libgcc1 libgssapi-krb5-2 libstdc++6 zlib1g libicu70 libssl3 -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),Ce={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#manual-install",target:"_blank",rel:"noopener noreferrer"},xe=a(`<p>Navigate to your <code>/root</code> home directory with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /root</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>First you need to download .NET 6.0, you can do it with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://download.visualstudio.microsoft.com/download/pr/901f7928-5479-4d32-a9e5-ba66162ca0e4/d00b935ec4dc79a27f5bde00712ed3d7/dotnet-sdk-6.0.400-linux-arm64.tar.gz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),Te={class:"custom-container tip"},Se=e("p",{class:"custom-container-title"},"ヒント",-1),Me={href:"https://download.visualstudio.microsoft.com/download/pr/cf567026-a29a-41aa-bc3a-e4e1ad0df480/0925d411e8e09e31ba7a39a3eb0e29af/aspnetcore-runtime-6.0.8-linux-arm.tar.gz",target:"_blank",rel:"noopener noreferrer"},Ae={class:"custom-container tip"},Ne=e("p",{class:"custom-container-title"},"ヒント",-1),Pe={href:"https://dotnet.microsoft.com/en-us/download/dotnet/6.0",target:"_blank",rel:"noopener noreferrer"},Le=a('<p>Once the file has been downloaded, you need to run the following commands in order:</p><ol><li><p><code>DOTNET_FILE=dotnet-sdk-6.0.400-linux-arm64.tar.gz</code></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>If you&#39;re using a different download link, update the file name in this command to match your version.</strong></p></div></li><li><p><code>export DOTNET_ROOT=/root/.dotnet</code></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>Here we&#39;re installing .NET in <code>/root</code>, if you&#39;re installing it somewhere else, make sure to set your own path!</strong></p></div></li><li><p><code>mkdir -p &quot;$DOTNET_ROOT&quot; &amp;&amp; tar zxf &quot;$DOTNET_FILE&quot; -C &quot;$DOTNET_ROOT&quot;</code></p></li><li><p><code>export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools</code></p></li></ol><p>Now we need to tell our shell to know where the <code>dotnet</code> command is, for future sessions, since the commands above just tell this current session where the <code>dotnet</code> is located.</p>',3),Re={class:"custom-container warning"},Oe=e("p",{class:"custom-container-title"},"注意",-1),Ie={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Ve=a(`<p>To enable this, we need to edit our <code>/root/.bashrc</code> file with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano /root/.bashrc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Scroll down to the bottom of the file using <code>Page Down</code> (<code>PGDN</code>) button, make a new line and paste the following text:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> DOTNET_ROOT=/root/.dotnet/</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> PATH=</span><span style="color:#9CDCFE;">$PATH</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">$DOTNET_ROOT</span><span style="color:#D4D4D4;">/tools</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>Here we&#39;re installing .NET in <code>/root</code>, if you&#39;re installing it somewhere else, make sure to set your own path!</strong></p></div><p>Save the file usign the following combination of keys: <code>CTRL + X</code>, type <code>Y</code> and press Enter.</p><p>Veryfy that .NET was installed correctly by running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should get a help page:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">root@localhost:~</span><span style="color:#6A9955;"># dotnet</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mcc-をインストールする" tabindex="-1"><a class="header-anchor" href="#mcc-をインストールする" aria-hidden="true">#</a> MCC をインストールする</h4><p>Finally, we can install MCC.</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>If you have a 32 ARM processor, you need to build the MCC yourself, take a look at the <a href="#building-from-the-source-code">Building From Source</a> section. Also make sure to be using the appropriate <code>-r</code> parameter value for your architecture.</strong></p></div><p>Let&#39;s make a folder where the MCC will be stored with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then enter it the newly created folder:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> MinecraftConsoleClient</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Download the MCC with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://github.com/MCCTeam/Minecraft-Console-Client/releases/latest/download/MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Unzip it with the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">unzip MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can remove the zip archive now, we do not need it anymore, with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm MinecraftClient-linux-arm64.zip</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And finally run it with:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">./MinecraftClient</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="インストールした後に" tabindex="-1"><a class="header-anchor" href="#インストールした後に" aria-hidden="true">#</a> インストールした後に</h4><p>When you run Termux next time, you need to start Ubuntu with: <code>./startubuntu.sh</code></p><p>Then you can start the MCC again with <code>./MinecraftClient</code></p><p>To stop MCC from running you can press <code>CTRL + C</code></p>`,29),He={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},Fe=e("p",null,[s("For downloading files, you can use the "),e("code",null,"wget"),s(" file we have installed, simply run:")],-1),ze=e("p",null,[e("code",null,"wget your_link_here"),s(" (you have examples above, and a video tutorial down bellow).")],-1),Ue=e("p",null,"Also, here are some linux tutorials for people who are new to it:",-1),Ge={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},We={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},qe=e("h2",{id:"vps-で実行する",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vps-で実行する","aria-hidden":"true"},"#"),s(" VPS で実行する")],-1),Ke={class:"custom-container tip"},je=e("p",{class:"custom-container-title"},"ヒント",-1),$e={href:"https://github.com/MCCTeam/Minecraft-Console-Client",target:"_blank",rel:"noopener noreferrer"},Qe=a('<p>The <strong>Minecraft Console Client</strong> can be run on a VPS 24 hours, 7 days a week.</p><ul><li><a href="#what-is-a-vps">What is a VPS?</a></li><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#where-to-get-a-vps">Where to get a VPS</a></li><li><a href="#initial-amazon-vps-setup">Initial Amazon VPS setup</a></li><li><a href="#initial-vps-setup">Initial VPS setup</a></li><li><a href="#creating-a-new-user">Creating a new user account</a></li><li><a href="#installing-net-core-6">Installing .NET Core 6</a></li><li><a href="#installing-mcc-on-a-vps">Installing the Minecraft Console Client</a></li></ul><h3 id="vps-とは何ですか" tabindex="-1"><a class="header-anchor" href="#vps-とは何ですか" aria-hidden="true">#</a> VPS とは何ですか?</h3><p>VPS stands for a <strong>V</strong>irtual <strong>P</strong>rivate <strong>S</strong>erver, it&#39;s basically a remote virtual PC that is running in the cloud, 24 hours a day, 7 days in week. To be precise, it&#39;s a virtual machine that runs on top of a host operating system (eg. Proxmox).</p><p>You can use a VPS for hosting a website, or a an app, or a game server, or your own VPN, or the Minecraft Console Client.</p>',5),Xe={href:"https://youtu.be/42fwh_1KP_o",target:"_blank",rel:"noopener noreferrer"},Je=e("h3",{id:"前提要件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前提要件","aria-hidden":"true"},"#"),s(" 前提要件")],-1),Ze=e("p",null,"Gitbash (if you're on Windows)",-1),es={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},ss=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"ヒント"),e("p",null,[e("strong",null,"Make sure to allow the installation to add it to the context menu")])],-1),ns=e("li",null,[e("p",null,[e("code",null,"ssh"),s(" and "),e("code",null,"ssh-keygen"),s(" commands (On Windows they're available with Gitbash, on macOs and Linux they should be available by default, it not, search on how to install them)")])],-1),os=e("p",null,"Basic knowledge of Linux shell commands, terminal emulator usage, SSH and Nano editor.",-1),as=e("p",null,"If you already know this, feel free to skip.",-1),ts=e("p",null,"if you get stuck, watch those tutorials.",-1),is=e("p",null,"If you're new to this, you can learn about it here:",-1),ls={href:"https://www.youtube.com/watch?v=JsWQUOEL0N8",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://www.youtube.com/watch?v=SkB-eRCzWIU",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://www.youtube.com/watch?v=DLeATFgGM-A",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://www.youtube.com/watch?v=F80Z5qd2b_4",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://www.youtube.com/watch?v=1DF0dTscHHs",target:"_blank",rel:"noopener noreferrer"},us=a('<h3 id="vps-を入手する方法" tabindex="-1"><a class="header-anchor" href="#vps-を入手する方法" aria-hidden="true">#</a> VPS を入手する方法</h3><p>You have 2 options:</p><ul><li><a href="#buying-a-vps">Buying a VPS</a></li><li><a href="#aws-ec2-vps">Getting an AWS EC2 VPS for free (12 months free trial)</a></li></ul><h4 id="vps-を購入する" tabindex="-1"><a class="header-anchor" href="#vps-を購入する" aria-hidden="true">#</a> VPS を購入する</h4><p>If you do not want to give your info to Amazon or don&#39;t have a debit card, you can buy your own VPS.</p><p><strong>What hardware requirements I need for running the MCC?</strong></p><p>The MCC is not expensive to run, so it can run on basically any hardware, you do not need to spend a lot of money on a VPS if you are going to run just the MCC, go with the cheapest option.</p><p><strong>VPS を購入する方法</strong></p><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>In this tutorial we will be using <code>Ubuntu 22.04</code>, make sure to select it as the OS when buying a VPS.</strong></p></div><p>Some of the reliable and cheap hosting providers (sorted for price/performance):</p>',10),hs={href:"https://e-trail.net/vps",target:"_blank",rel:"noopener noreferrer"},ms=e("p",null,[e("strong",null,"Minimum price"),s(": "),e("code",null,"2.50 EUR / month")],-1),gs=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"ヒント"),e("p",null,[e("strong",null,"Does not have Ubuntu 22.04 in the dropdown menu when ordering, you will have to re-install later or ask support to do it.")])],-1),vs={href:"https://www.ovhcloud.com/de/vps/",target:"_blank",rel:"noopener noreferrer"},bs=e("p",null,[e("strong",null,"Minimum price"),s(": "),e("code",null,"3.57 EUR / month")],-1),ys={href:"https://www.hetzner.com/cloud",target:"_blank",rel:"noopener noreferrer"},fs=e("p",null,[e("strong",null,"Minimum price"),s(": "),e("code",null,"4.51 EUR / month")],-1),ws={href:"https://www.digitalocean.com/pricing/droplets",target:"_blank",rel:"noopener noreferrer"},_s=e("p",null,[e("strong",null,"Minimum price"),s(": "),e("code",null,"4 EUR / month")],-1),Ds={href:"https://contabo.com/en/vps/",target:"_blank",rel:"noopener noreferrer"},ks=e("p",null,[e("strong",null,"Minimum price"),s(": "),e("code",null,"7 EUR / month")],-1),Es=e("p",null,[e("strong",null,"More serious VPS able to host multiple applications, 4 CPU cores and 8 GB of RAM, 200 GB SSD")],-1),Cs=a('<p>You also may want to search for better deals.</p><h4 id="aws-ec2-vps" tabindex="-1"><a class="header-anchor" href="#aws-ec2-vps" aria-hidden="true">#</a> AWS EC2 VPS</h4><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>This will require you to have a valid debit card that can be used on internet and a mobile phone number, as well as giving that info to Amazon corporation.</strong></p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>Scammers often get AWS VPS and use it to mass login on to stolen Microsoft accounts, some AWS IP addresses might be blocked by Microsoft because of that, if so, you might need to switch regions or to use a Proxy. To debug if your IP has been banned by Microsoft, use the <code>ping &lt;ip&gt;</code> and <code>traceroute &lt;ip&gt;</code> commands.</strong></p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>Related to the warning above, if you have issues logging with Microsoft and you&#39;re not banned, you may want to check the Security center on your account and approve the login from the VPS, this can be the case for some users.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>If you&#39;re not banned, sometimes fetching the keys can take some time, try giving it a minute or two, if it still hangs, hit some keys to refresh the screen, or try restarting and running again. If it still happens, use tmux instead of screen.</strong></p></div><p>Register on AWS and enter all of your billing info and a phone number.</p><p>Once you&#39;re done, you can continue to <a href="#setting-up-an-aws-vps">Setting up the Amazon VPS</a>.</p><h3 id="amazon-vps-の初期設定" tabindex="-1"><a class="header-anchor" href="#amazon-vps-の初期設定" aria-hidden="true">#</a> Amazon VPS の初期設定</h3><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Skip this section if you&#39;re not using AWS. Go to <a href="#initial-vps-setup">Initial VPS setup</a></strong></p></div><p>When you register and open the <code>AWS Console</code>, click on the Search field on the top of the page and search for: <code>EC2</code></p><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Make sure to select the region closest to you for the minimal latency</strong></p></div><p>Click on the <strong>Launch instance</strong> button.</p><p>Fill out the <code>Name</code> field with a name of your preference.</p><p><img src="'+t+'" alt="VPS Name"></p><p>For the <strong>Application and OS images</strong> select <code>Ubuntu Server 22.04 LTS (HVM), SSD Volume Type</code>.</p><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>Make sure that it has <code>Free tier eligible</code> next to it.</strong></p></div><p><img src="'+i+'" alt="VPS Select OS"></p><p>For the <strong>Instance type</strong> select <code>t2.micro</code>.</p><p>For the <strong>Key pair (login)</strong> click on <strong>Create new key pair</strong> and name it <code>VpsRoot</code>, leave the rest of settings as default and click <strong>Create key pair</strong>, this will generate a RSA private key that will be automatically downloaded.</p><div class="custom-container danger"><p class="custom-container-title">重要</p><p><strong>Make sure that you save this file in a safe place and do not loose it, it&#39;s of an upmost importance since it&#39;s used to access the root/admin account of the VPS. Without it you will not be able to access the root account of the VPS! Also do not let it fall into wrong hands.</strong></p></div><p><img src="'+l+'" alt="VPS Instance Type"></p><p>For the <strong>Network settings</strong> check the following checkboxes on:</p><ul><li><code>Allow SSH traffic from</code> (Anywhere)</li><li><code>Allow HTTPs traffic from the internet</code></li><li><code>Allow HTTP traffic from the internet</code></li></ul><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>The SSH traffic from Anywhere is not the best thing for security, you might want to enter IP addresses of your devices from which you want to access the VPS manually.</strong></p></div><p><img src="'+r+'" alt="VPS Network Settings"></p><p>For the <strong>Storage</strong> enter <code>30</code>.</p><p><img src="'+c+`" alt="VPS Configure Storage"></p><p>Finally, review the <strong>Summary</strong> confirm that everything is as in the tutorial and that you will not be charged and click on the <strong>Launch instance</strong>. Once you&#39;ve clicked on the button, it will take a couple of minutes for the instance to be available up and running.</p><p>Once the instance is up and running, go to it&#39;s details and copy the <code>Public DNS v4 IP</code>.</p><p>You now need to login, go to your folder where you keep the private key you&#39;ve generated and downloaded (make sure you make a new folder for it, do not keep in the downloads folder) and right click on the empty white space (not on files), if you&#39;re on Windows click <strong>Git Bash here</strong>, on mac OS and Linux click on <strong>Open Terminal</strong> (or whatever it is called).</p><p>In order to login with SSH, you are going to use the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;name of your private root key here&gt; ubuntu@&lt;your public dns v4 ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong><code>&lt;</code> and <code>&gt;</code> are not typed, that is just a notation for a placeholder!</strong></p></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong><code>ubuntu</code> is a default root account username for Ubuntu on AWS!</strong></p></div><p>サンプル:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i VpsRoot.pem ubuntu@ec2-3-71-108-69.eu-central-1.compute.amazonaws.com</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you&#39;ve provided the right info you should get <code>Welcome to Ubuntu 20.04.5 LTS</code> message.</p><p>Now you can continue to <a href="#creating-a-new-user">Creating a new user</a></p><h3 id="vps-の初期設定" tabindex="-1"><a class="header-anchor" href="#vps-の初期設定" aria-hidden="true">#</a> VPS の初期設定</h3><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>This section if for those who do not use AWS, if you use AWS skip it</strong></p></div><p>When you order the VPS, most likely you will be asked to provide the root account name and password, if it is the case, name the account as <code>root</code> and give it a password of your choice.</p><p>Other option is that you will get your login info in the email once the setup is done.</p>`,43),xs={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},Ts=e("code",null,"ssh",-1),Ss=a(`<p>If you&#39;re on Windows open <code>Git Bash</code>, on mac OS and Linux open a <code>Terminal</code> and type the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh &lt;username&gt;@&lt;ip&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>If you&#39;re given a custom port other than <code>22</code> by your host, you should add <code>-p &lt;port here&gt;</code> before the username (eg. <code>ssh -p &lt;port here&gt; &lt;username&gt;@&lt;ip&gt;</code>) or <code>:&lt;port&gt;</code> after the ip (eg. <code>ssh &lt;username&gt;@&lt;ip&gt;:&lt;port&gt;</code>)</strong></p></div><p>サンプル:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example with port:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -p 2233 root@142.26.73.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Once you&#39;ve logged in you should see a Linux prompt and a welcome message if there is one set by your provider.</p><h3 id="新しいユーザーを作成する" tabindex="-1"><a class="header-anchor" href="#新しいユーザーを作成する" aria-hidden="true">#</a> 新しいユーザーを作成する</h3><p>Once you&#39;ve logged in to your VPS you need to create a new user and give it SSH access.</p><p>In this tutorial we will be using <code>mcc</code> as a name for the user account that will be running the MCC.</p><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>You may be wondering why we&#39;re creating a separate user account and making it be accessible over SSH only. This is for security reasons, if you do not want to do this, you&#39;re free to skip it, but be careful.</strong></p></div><p>To create a new user named <code>mcc</code> execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo useradd mcc -m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we need to give it a password, execute the following command, type the password and confirm it:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo passwd mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>When you&#39;re typing a password it will not be displayed on the screen, but you&#39;re typing it for real.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>Make sure you have a strong password!</strong></p></div><p>Now we need to give our user account the admin permissions:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo usermod -aG sudo mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we are going to set it&#39;s shell to bash:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo chsh mcc -s /bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now we need to log in as the <code>mcc</code> user:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">su mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Fill in your password when asked.</p><p>Navigate to the <code>mcc</code> user home directory with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Make a new <code>.ssh</code> directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Enter it with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> .ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Make a new empty file named <code>authorized_keys</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">touch authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Do no close the Git bash/Terminal emulator.</p><p>On your PC, make a new folder where you are going to store your SSH keys that you&#39;re going to use to log in to the user account.</p><p>Open the folder, and right click on the empty white space (not on files), if you&#39;re on Windows click <strong>Git Bash here</strong>, on mac OS and Linux click on <strong>Open Terminal</strong> (or whatever it is called).</p><p>Type the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh-keygen -t RSA -b 4096</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Enter the name of the key file to be: <code>MCC_Key</code>, press Enter.</p><p>When asked for a <code>passphrase</code>, enter a password of your choice and confirm it, make sure it&#39;s strong and that you remember it, best if you write it down on a piece of paper.</p><p>This will generate a private and a public key that you will use to log in to the VPS as a user that you&#39;ve created.</p><p>Now open the <code>MCC_Key.pub</code> file with a text editor of your choice and copy it&#39;s contents to the clipboard.</p><p>Return to the Git Bash/Terminal emulator and execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install nano -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will install the Nano editor on your VPS.</p><p>Now we need to let the SSH service on your VPS know about your newly generated SSH key pair.</p><p>Make sure you are in the <code>/home/mcc/.ssh</code> folder, you can confirm this by executing:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">pwd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If it does not print <code>/home/mcc/.ssh</code>, navigate to it with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> /home/mcc/.ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now you need to open the <code>authorized_keys</code> file with the nano editor:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">nano authorized_keys</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now paste the copied contents of the <code>MCC_Key.pub</code> into the nano editor by right clicking on it.</p><p>Save the file with <code>CTRL + O</code>, press Enter, and then exit it with <code>CTRL + X</code>.</p><p>Now we need to configure the SSHD service to let us login with the SSH key we have generated, for this we need to edit the <code>/etc/ssh/sshd_config</code> file with nano:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo nano /etc/ssh/sshd_config</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Find the <code>#PubkeyAuthentication yes</code> line and remove the <code>#</code> in front to uncomment the line.</p><p>Then find the <code>#AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</code> line and remove the <code>#</code> to uncomment the line.</p><p>Additionally for better security you can do the following:</p><ul><li>Set <code>PermitRootLogin</code> to <code>yes</code></li><li>Change the <code>Port</code> to some number of your choice (22-65000) (Make sure it&#39;s at least 2 digits and avoid common ports used by other apps like: 21, 80, 35, 8080, 3000, etc...)</li><li>Uncomment <code>#PasswordAuthentication yes</code> by removing the <code>#</code> in front and set it to <code>yes</code> (This will disable password login, you will be able to login with SSH keys only!)</li></ul><p>Save the file with <code>CTRL + O</code>, hit Enter, close it with <code>CTRL + X</code>.</p><p>Now we need to restart the SSHD service with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl restart sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s check if everything is working correctly:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo systemctl status sshd</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If everything has been configured as it should be you should see <code>active (running)</code> as a status of the service.</p><p>If not, open the config file again and check for mistakes.</p><p>Press <code>q</code> to exit the log mode.</p><p>Logout from the <code>mcc</code> user with <code>exit</code> command, and then logout from the root <code>ubuntu</code> user by typing <code>exit</code> again.</p><p>Now we can login to the user with our private <code>MCC_Key</code> file.</p><p>Command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i &lt;path to the MCC_Key private key&gt; mcc@&lt;ip here&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>サンプル:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">ssh -i MCC_Key mcc@3.71.108.69</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>If you&#39;ve changed the <code>Port</code>, make sure you add a <code>-p &lt;your port here&gt;</code> option after the <code>-i &lt;key&gt;</code> option (eg. <code>ssh -i MCC_Key -p 8973 mcc@3.71.108.69</code>)!</strong></p></div><p>If did everything correctly you should see a Linux prompt and a welcome message if there is one on your provider.</p><p>You can do <code>whoami</code> to see your username.</p><p>Now you can install .NET Core 6 and MCC.</p><h3 id="net-core-6-をインストールする" tabindex="-1"><a class="header-anchor" href="#net-core-6-をインストールする" aria-hidden="true">#</a> .NET Core 6 をインストールする</h3><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>If your VPS has an ARM CPU, follow <a href="#installing-net-on-arm">this</a> part of the documentation and then return to section after this one.</strong></p></div>`,80),Ms={class:"custom-container warning"},As=e("p",{class:"custom-container-title"},"注意",-1),Ns=e("code",null,"A fatal error occurred, the folder [/usr/share/dotnet/host/fxr] does not contain any version-numbered child folders",-1),Ps={href:"https://github.com/dotnet/sdk/issues/27082#issuecomment-1211143446",target:"_blank",rel:"noopener noreferrer"},Ls=a(`<p>Log in as the user you&#39;ve created.</p><p>Update the system packages and package manager repositories:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt update -y &amp;&amp; sudo apt upgrade -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Install <code>wget</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install wget -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Go to your home directory with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ~</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Download the Microsoft repository file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Add Microsoft repositories to the package manager:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo dpkg -i packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Remove the file, we do not need it anymore:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">rm packages-microsoft-prod.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, install .NET Core 6:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt-get update -y &amp;&amp; sudo apt-get install -y dotnet-sdk-6.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run the following command to check if everything was installed correctly:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should get:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">Usage: dotnet [options]</span></span>
<span class="line"><span style="color:#D4D4D4;">Usage: dotnet [path-to-application]</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">Options:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h|--help         Display help.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --info            Display .NET information.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-sdks       Display the installed SDKs.</span></span>
<span class="line"><span style="color:#D4D4D4;">  --list-runtimes   Display the installed runtimes.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">path-to-application:</span></span>
<span class="line"><span style="color:#D4D4D4;">  The path to an application .dll file to execute.</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),Rs={href:"https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#2204",target:"_blank",rel:"noopener noreferrer"},Os=a('<p>If it was successful, you can now install the MCC.</p><h3 id="vps-に-mcc-をインストールする" tabindex="-1"><a class="header-anchor" href="#vps-に-mcc-をインストールする" aria-hidden="true">#</a> VPS に MCC をインストールする</h3><p>Now that you have .NET Core 6.0 and a user account, you should install the <code>screen</code> utility, you will need this in order to keep the MCC running once you close down the SSH session (if you do not have it, the MCC will just stop working once you disconnect). You can look at the <code>screen</code> like a window, except it&#39;s in a terminal, it lets you have multiple &quot;windows&quot; open at the same time.</p><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>There is also a Docker method, if you&#39;re using Docker, you do not need the <code>screen</code> program.</strong></p></div>',4),Is={href:"https://youtu.be/_ZJiEX4rmN4",target:"_blank",rel:"noopener noreferrer"},Vs=a(`<p>To install the <code>screen</code> execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">sudo apt install screen -y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Now you can install the MCC:</p><ul><li><a href="#download-a-compiled-binary">コンパイル済みバイナリをダウンロードする</a></li><li><a href="#building-from-the-source-code">ソース コードからビルドする</a></li><li><a href="#using-docker">Run using Docker</a> (Doesn&#39;t require the <code>screen</code> command)</li></ul><p>How to use the <code>screen</code> command?</p>`,5),Hs={class:"custom-container warning"},Fs=e("p",{class:"custom-container-title"},"注意",-1),zs={href:"https://www.youtube.com/watch?v=Yl7NFenTgIo",target:"_blank",rel:"noopener noreferrer"},Us=a(`<p>To start a screen, type:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -S mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong><code>mcc</code> here is the name of the screen, you can use whatever you like, but if you&#39;ve used a different name, make sure you use that one instead of the <code>mcc</code> in the following commands.</strong></p></div><div class="custom-container tip"><p class="custom-container-title">ヒント</p><p><strong>You need to make a screen only once, however if you reboot your VPS, you need to start it on each reboot.</strong></p></div><p>Now you will be in the screen, now you can start the MCC and detach from the screen.</p><p>To detach from the screen press <code>CTRL + A + D</code>.</p><p>To re-attach/return to the screen, execute the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -r mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you&#39;ve accidentally closed the SSH session without detaching from the screen it might be still attached, to detach it use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -d mcc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To list out screens you can use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">screen -ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To stop the MCC, you can hit <code>CTRL + D</code> (hit it few times).</p>`,13);function Gs(Bs,Ws){const n=p("ExternalLinkIcon");return u(),h("div",null,[g,e("ul",null,[e("li",null,[e("a",v,[s("Windows へのインストール (英語)"),o(n)])]),e("li",null,[e("a",b,[s("Windows へのインストールとプレイヤーの自動化など (英語)"),o(n)])])]),y,e("p",null,[s("最新ビルドのコンパイル済みバイナリ ファイルは、GitHub の "),e("a",f,[s("Releases"),o(n)]),s(" セクションからダウンロードできます。")]),w,e("p",null,[e("a",_,[s("GitHub"),o(n)]),s(" からコンパイル済みバイナリをダウンロードすることをお勧めします。")]),D,k,E,e("ul",null,[e("li",null,[e("a",C,[s("Git"),o(n)])]),e("li",null,[s("C# アプリ開発用に構成された "),e("a",x,[s(".NET 7.0 以降"),o(n)]),s("または "),e("a",T,[s("Visual Studio"),o(n)])])]),S,e("p",null,[e("a",M,[s("Git"),o(n)]),s(" をインストールします。")]),e("ol",null,[A,N,P,e("li",null,[s("end と入力して次のコマンドを実行し、"),e("a",L,[s("GitHub リポジトリ"),o(n)]),s("のクローンを作成します。")])]),R,e("ol",null,[e("li",null,[s("Crowdin の "),e("a",O,[s("MCC プロジェクト"),o(n)]),s("にアクセスします。")]),I]),V,e("ul",null,[e("li",null,[H,e("ul",null,[F,e("li",null,[e("p",null,[e("a",z,[s("macOS に Git をインストールする"),o(n)])])])])]),e("li",null,[U,e("ul",null,[e("li",null,[e("a",G,[s("Linux に .NET をインストールする"),o(n)])]),e("li",null,[e("a",B,[s("macOS に .NET をインストールする"),o(n)])])])])]),W,e("ol",null,[Y,e("li",null,[s("end と入力して次のコマンドを実行し、"),e("a",q,[s("GitHub リポジトリ"),o(n)]),s("のクローンを再帰的に作成します。")])]),K,e("ol",j,[$,Q,e("li",null,[X,e("ul",null,[e("li",null,[J,s(),e("div",Z,[ee,e("p",null,[e("strong",null,[s("ARM、32 ビット、Rhel ベース、Musl、または Tirzen のいずれかの Linux を使用している場合は、プラットフォームに"),e("a",se,[s("適した RID を見つけて"),o(n)]),s("、"),ne,s(" を適切な "),oe,s(" に置き換えます。(アームの例: "),ae,s(")")])])])]),e("li",null,[te,s(),e("div",ie,[le,e("p",null,[e("strong",null,[s("Intel で MacOS を使用していない場合は、ARM プロセッサに"),e("a",re,[s("適した RID を見つけて"),o(n)]),s("、"),ce,s(" を適切な "),de,s(" に置き換えます。(アームの例: "),pe,s(")")])])])])])])]),ue,e("ol",null,[e("li",null,[s("end と入力して次のコマンドを実行し、"),e("a",he,[s("GitHub リポジトリ"),o(n)]),s("のクローンを作成します。")])]),me,e("div",ge,[ve,e("p",null,[e("strong",null,[s("Linux に関する基本的な知識がない場合は、"),e("a",be,[s("Linux ターミナルの紹介動画 (英語)"),o(n)]),s(" を視聴して、基本的なコマンドに慣れてください。")])])]),ye,e("p",null,[e("a",fe,[s("Termux の最新リリース"),o(n)]),s("に移動し、"),we,s(" をダウンロードして展開し、実行します。")]),_e,e("ol",null,[De,e("li",null,[e("a",ke,[s("Ubuntu をインストールする Youtube チュートリアル (英語)"),o(n)]),s(" を視聴する。")])]),Ee,e("p",null,[s("After you have installed dependencies, it's time to install .NET, you either can follow this tutorial or the "),e("a",Ce,[s("Microsoft one"),o(n)]),s(".")]),xe,e("div",Te,[Se,e("p",null,[e("strong",null,[s("This tutorial assumes that you have 64 bit version of ARM processor, if you happen to have a 32-bit version replace the link in the command above with "),e("a",Me,[s("this one"),o(n)])])])]),e("div",Ae,[Ne,e("p",null,[e("strong",null,[s("This tutorial assumes that you're following along and using Ubuntu 22.04, if you're using a different distro, like Alpine, go to "),e("a",Pe,[s("here"),o(n)]),s(" and copy an appropriate link for your distro.")])])]),Le,e("div",Re,[Oe,e("p",null,[e("strong",null,[s("You will need a basic knowledge of Nano text editor, if you do not know how to use it, watch this "),e("a",Ie,[s("Youtube video tutorial"),o(n)])])])]),Ve,e("p",null,[s("To edit the configuration/settings, you need a text editor, we recommend Nano, as it's very simple to use, if you have followed the installation steps above, you should be familiar with it, if not, check out "),e("a",He,[s("this tutorial"),o(n)]),s(".")]),Fe,ze,Ue,e("ul",null,[e("li",null,[e("a",Ge,[s("Linux Terminal Introduction by ExplainingComputers"),o(n)])]),e("li",null,[e("a",Be,[s("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),o(n)])]),e("li",null,[e("a",We,[s("Linux Crash Course - The wget Command by Learn Linux TV"),o(n)])]),e("li",null,[e("a",Ye,[s("Linux Basics: How to Untar and Unzip Files (tar, gzip) by webpwnized"),o(n)])])]),qe,e("div",Ke,[je,e("p",null,[e("strong",null,[s("This is a new section, if you find a mistake, please report it by opening an Issue in our "),e("a",$e,[s("Github repository"),o(n)]),s(". Thank you!")])])]),Qe,e("p",null,[s("Here is a "),e("a",Xe,[s("Youtube video"),o(n)]),s(" that explains it in more detail if you're interested.")]),Je,e("ol",null,[e("li",null,[Ze,e("p",null,[s("Download and install "),e("a",es,[s("Gitbash"),o(n)]),s(".")]),ss]),ns,e("li",null,[os,as,ts,is,e("ul",null,[e("li",null,[e("a",ls,[s("What is Linux? by Bennett Bytes"),o(n)])]),e("li",null,[e("a",rs,[s("Linux Terminal Introduction by ExplainingComputers"),o(n)])]),e("li",null,[e("a",cs,[s("Linux Crash Course - nano (command-line text editor) by Learn Linux TV"),o(n)])]),e("li",null,[e("a",ds,[s("Linux Crash Course - The wget Command by Learn Linux TV"),o(n)])]),e("li",null,[e("a",ps,[s("Linux Basics: How to Untar and Unzip Files (tar, gzip) by webpwnized"),o(n)])])])])]),us,e("ul",null,[e("li",null,[e("p",null,[e("a",hs,[s("E-Trail"),o(n)])]),ms,gs]),e("li",null,[e("p",null,[e("a",vs,[s("OVH Cloud"),o(n)])]),bs]),e("li",null,[e("p",null,[e("a",ys,[s("Hetzner Cloud"),o(n)])]),fs]),e("li",null,[e("p",null,[e("a",ws,[s("Digital Ocean"),o(n)])]),_s]),e("li",null,[e("p",null,[e("a",Ds,[s("Contabo"),o(n)])]),ks,Es])]),Cs,e("p",null,[s("Once you have the root login account info, you need "),e("a",xs,[s("Gitbash"),o(n)]),s(" on Windows and "),Ts,s(" if you're on macOS or Linux (if you do not have it by some chance, search on how to install it, it is simple).")]),Ss,e("div",Ms,[As,e("p",null,[e("strong",null,[s("With newer versions of .NET Core 6 on Ubuntu 22.04 you might get the following error: "),Ns,s(", if you get it, use "),e("a",Ps,[s("this solution"),o(n)])])])]),Ls,e("p",null,[s("If you do not get this output and the installation was not successful, "),e("a",Rs,[s("try other methods"),o(n)]),s(".")]),Os,e("p",null,[s("You also can learn about the screen command from "),e("a",Is,[s("this Youtube tutorial"),o(n)]),s(".")]),Vs,e("div",Hs,[Fs,e("p",null,[e("strong",null,[s("If you have issues with Screen command, like output not being properly formatted or program handing/freezing, try using tmux, click "),e("a",zs,[s("here"),o(n)]),s(" to learn how to use it.")])])]),Us])}const Ks=d(m,[["render",Gs],["__file","installation.html.vue"]]);export{Ks as default};
